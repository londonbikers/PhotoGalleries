@using Newtonsoft.Json
@model PagedResultSet<Image>
@{
    var tag = (string)ViewData["tag"];
    ViewData["Title"] = $"{tag} Photos";
}

<div class="text-center">
    <h4 class="display-4">Tag: @tag</h4>
    <div class="text-format text-link">We tag our photos so you can find them more easily. These are the ones we've tagged with @tag.</div>
    <hr />
    
    <form class="form-inline justify-content-center" id="filter-form">
        <div class="mr-sm-3">
            <ul class="pagination">
                <li class="page-item disabled"><span class="page-link page-link-sm">Sort by</span></li>
                <li class="page-item active"><a href="?s=datecreated" class="page-link page-link-sm">Date</a></li>
                <li class="page-item"><a href="?s=popularity" class="page-link page-link-sm">Popularity</a></li>
                <li class="page-item"><a href="?s=comments" class="page-link page-link-sm">Comments</a></li>
            </ul>
        </div>

        <div class="mr-sm-3">
            <ul class="pagination">
                <li class="page-item disabled"><span class="page-link page-link-sm">Period</span></li>
                <li class="page-item"><a href="#" class="page-link page-link-sm">Week</a></li>
                <li class="page-item"><a href="#" class="page-link page-link-sm">Month</a></li>
                <li class="page-item"><a href="#" class="page-link page-link-sm">Year</a></li>
                <li class="page-item active"><a href="#" class="page-link page-link-sm">Forever</a></li>
            </ul>
        </div>

        @*<ul class="pagination">
            <li class="page-item disabled"><span class="page-link page-link-sm">Direction</span></li>
            <li class="page-item active"><a href="#" class="page-link page-link-sm"><i class="bi bi-sort-down"></i></a></li>
            <li class="page-item"><a href="#" class="page-link page-link-sm"><i class="bi bi-sort-up"></i></a></li>
        </ul>*@
    </form>

    @await Component.InvokeAsync("ImagePaginator", new { pagedResultSet = Model })

    @if (Model.TotalResults == 0)
    {
        <p class="lead">
            Sorry, we haven't got any photos for @tag yet
        </p>
    }

    <div class="row mt-2" data-bind="foreach: Images">
        <div class="col-md-4">
            <div class="card mb-4 shadow-sm">
                <a data-bind="attr: { href: window.GetImageUrl(GalleryId, Id, Name) }"><img data-bind="attr: { title: Name, src: GetImageThumbnailUrl(Files, $element) }" class="img-fluid" /></a>
                <div class="card-body card-body-thin">
                    <span class="card-text" data-bind="text: Name"></span>
                    <div data-bind="visible: Count > 0" class="text-med-size mt-1">
                        <span data-bind="text: Count"></span> Comment<span data-bind="visible: Count > 1">s</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="pb-3">
        @await Component.InvokeAsync("ImagePaginator", new { pagedResultSet = Model })
    </div>

</div>
@section Scripts
{
    <script src="~/lib/knockout/dist/knockout-3.5.1.js"></script>

    <script type="text/javascript">

        // convert the gallery server objects into a new lightweight object to aid with rendering of the gallery grid
        // and convert to json so the Knockout script can parse it and use it.
        var payload = @Html.Raw(JsonConvert.SerializeObject(Model.Results.Select(i => new
                      {
                          i.Id,
                          i.GalleryId,
                          i.Name,
                          i.Files,
                          i.Comments.Count
                      })));

        // the view model that knockout uses to bind data to the html
        function ViewModel() {
            // parse the images from a json blob
            this.Images = ko.observableArray(payload);
        }

        $(document).ready(function() {
            ko.applyBindings(new ViewModel());
        });
    </script>
}
