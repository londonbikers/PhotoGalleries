@using LB.PhotoGalleries.Application.Models
@using Newtonsoft.Json
@model PagedResultSet<Image>
@{
    var tag = (string)ViewData["tag"];
    ViewData["Title"] = $"{tag} Photos";
}

<div class="text-center">
    <h4 class="display-4">Tag: @tag</h4>
    <div class="text-format text-link">We tag our photos so you can find them more easily. These are the ones we've tagged with @tag.</div>
    <hr />

    @await Component.InvokeAsync("ImagePaginator", new { pagedResultSet = Model })
    
    @if (Model.TotalResults == 0)
    {
        <p class="lead">
            Sorry, we haven't got any photos for @tag yet
        </p>
    }

    <div class="row mt-3" data-bind="foreach: Images">
        <div class="col-md-4">
            <div class="card mb-4 shadow-sm">
                <a data-bind="attr: { href: GetImageUrl(GalleryId, Id, Name) }"><img data-bind="attr: { title: Name, src: GetThumbnailUrl(StorageId, $element) }" class="img-fluid" /></a>
                <div class="card-body">
                    <p class="card-text" data-bind="text: Name"></p>
                    <div class="d-flex justify-content-between align-items-center">
                        <small data-bind="text: Created" class="text-muted"></small>
                        @*<small class="text-muted"><span data-bind="text: ImageCount"></span> photos</small>*@
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="pb-3">
        @await Component.InvokeAsync("ImagePaginator", new { pagedResultSet = Model })
    </div>

</div>
@section Scripts
{
    <script src="~/lib/knockout/dist/knockout-3.5.1.js"></script>

    <script type="text/javascript">

        // convert the gallery server objects into a new lightweight object to aid with rendering of the gallery grid
        // and convert to json so the Knockout script can parse it and use it.
        var payload = @Html.Raw(JsonConvert.SerializeObject(Model.Results.Select(i => new
                      {
                          i.Id,
                          i.GalleryId,
                          i.Name,
                          i.StorageId,
                          Created = i.Metadata.TakenDate.HasValue ? i.Metadata.TakenDate.Value.ToShortDateString() : i.Created.ToShortDateString()
                      })));

        // for high-dpi displays we need to request a larger image than the space we intend to view it in.
        // this ensures images are as crisp as they can be for each client device.
        function GetThumbnailUrl(storageId, element) {
            var cardInnerWidth = $(element).parent().parent().innerWidth();
            var cardInnerHeight = Math.round(cardInnerWidth / 1.52); // 1.52 is the ratio of height to width we'd like to show the image at
            var scaledWidth = Math.round(cardInnerWidth * window.devicePixelRatio);
            var scaledHeight = Math.round(cardInnerHeight * window.devicePixelRatio);
            return `/i/${storageId}?w=${scaledWidth}&h=${scaledHeight}&mode=crop`;
        }

        function GetImageUrl(galleryId, imageId, name) {
            var encodedName = EncodeParamForUrl(name);
            return `/gi/${galleryId}/${imageId}/${encodedName}`;
        }

        // the view model that knockout uses to bind data to the html
        function ViewModel() {
            // parse the images from a json blob
            this.Images = ko.observableArray(payload);
        }

        $(document).ready(function() {
            ko.applyBindings(new ViewModel());
        });
    </script>
}
