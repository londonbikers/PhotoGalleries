@using LB.PhotoGalleries.Application
@using Newtonsoft.Json
@model Category
@{
    ViewData["Title"] = "Details";
    var galleries = (PagedResultSet<Gallery>)ViewData["galleries"];
}

<div class="text-center">
    <h4 class="display-4">@ViewData.Model.Name</h4>
    <div class="text-format text-link">@Html.Raw(ViewData.Model.Description)</div>

    <div class="row mb-3 mt-3">
        <div class="col">
            @foreach (var category in Server.Instance.Categories.Categories)
            {
                if (category.Id == Model.Id)
                {
                    <a asp-controller="Categories" asp-action="Details" asp-route-name="@Helpers.EncodeParamForUrl(category.Name)" class="btn btn-sm btn-primary btn-v-spaced" role="button">@category.Name</a>
                }
                else
                {
                    <a asp-controller="Categories" asp-action="Details" asp-route-name="@Helpers.EncodeParamForUrl(category.Name)" class="btn btn-sm btn-outline-primary btn-v-spaced" role="button">@category.Name</a>
                }
            }
        </div>
    </div>
    <hr />
    
    @if (galleries != null)
    {
        @await Component.InvokeAsync("GalleryPaginator", new { pagedResultSet = galleries })

        <div class="row mt-3" data-bind="foreach: Galleries">
            <div class="col-md-4">
                <div class="card mb-4 shadow-sm">
                    <a data-bind="attr: { href: GetGalleryUrl(CategoryName, Id, Name) }"><img data-bind="attr: { title: Name, src: GetImageThumbnailUrl(ThumbnailFiles, $element) }" class="img-fluid" /></a>
                    <div class="card-body-thin">
                        <p class="card-text text-center" data-bind="text: Name"></p>
                    </div>
                    <div class="card-body-thin card-body-bottom">
                        <div class="d-flex justify-content-between align-items-center text-med-size">
                            <span class="text-muted" data-bind="text:CategoryName"></span>
                            <span data-bind="visible: CommentCount > 0"><span data-bind="text: CommentCount"></span> Comment<span data-bind="visible: CommentCount > 1">s</span></span>
                            <span class="text-muted"><span data-bind="text: ImageCount"></span> Photos</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="pb-3">
            @await Component.InvokeAsync("GalleryPaginator", new { pagedResultSet = galleries })
        </div>
    }
    else
    {
        <p class="lead">
            Waiting for first gallery in this category...
        </p>
    }


</div>
@section Scripts
{
    <script src="~/lib/knockout/dist/knockout-3.5.1.js"></script>

    <script type="text/javascript">

        // convert the gallery server objects into a new lightweight object to aid with rendering of the gallery grid
        // and convert to json so the Knockout script can parse it and use it.
        var payload = @if (galleries != null)
                      {
                          @Html.Raw(JsonConvert.SerializeObject(galleries.Results.Select(g => new
                          {
                              g.CategoryId,
                              g.Id,
                              g.Name,
                              g.ThumbnailFiles,
                              g.ImageCount,
                              g.CommentCount,
                              CategoryName = Model.Name
                          })))
                      };

        // the view model that knockout uses to bind data to the html
        function ViewModel() {
            // parse the images from a json blob
            this.Galleries = ko.observableArray(payload);
        }

        $(document).ready(function() {
            ko.applyBindings(new ViewModel());
        });
    </script>
}
