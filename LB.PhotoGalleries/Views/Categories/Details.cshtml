@using LB.PhotoGalleries.Application
@using LB.PhotoGalleries.Application.Models
@using Newtonsoft.Json
@model LB.PhotoGalleries.Application.Models.Category
@{
    ViewData["Title"] = "Details";
    var galleries = (PagedResultSet<Gallery>)ViewData["galleries"];
}

<div class="text-center">
    <h4 class="display-4">@ViewData.Model.Name</h4>
    <div class="text-format text-link">@ViewData.Model.Description</div>

    <div class="row mb-3 mt-3">
        <div class="col">
            @foreach (var category in Server.Instance.Categories.Categories)
            {
                if (category.Id == Model.Id)
                {
                    <a asp-controller="Categories" asp-action="Details" asp-route-name="@Utilities.EncodeParamForUrl(category.Name)" class="btn btn-xsm btn-secondary" role="button">@category.Name</a>
                }
                else
                {
                    <a asp-controller="Categories" asp-action="Details" asp-route-name="@Utilities.EncodeParamForUrl(category.Name)" class="btn btn-xsm btn-outline-primary" role="button">@category.Name</a>
                }
            }
        </div>
    </div>
    <hr />

    @await Component.InvokeAsync("GalleryPaginator", new { pagedResultSet = galleries })

    <div class="row mt-3" data-bind="foreach: Galleries">
        <div class="col-md-4">
            <div class="card mb-4 shadow-sm">
                <a data-bind="attr: { href: GetGalleryUrl(CategoryId, Id, Name) }"><img data-bind="attr: { title: Name, src: GetThumbnailUrl(ThumbnailStorageId, $element) }" class="img-fluid" /></a>
                <div class="card-body">
                    <p class="card-text" data-bind="text: Name"></p>
                    <div class="d-flex justify-content-between align-items-center">
                        <small data-bind="text: CategoryName" class="text-muted"></small>
                        <small class="text-muted"><span data-bind="text: ImageCount"></span> photos</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="pb-3">
        @await Component.InvokeAsync("GalleryPaginator", new { pagedResultSet = galleries })
    </div>

</div>
@section Scripts
{
    <script src="~/lib/knockout/dist/knockout-3.5.1.js"></script>

    <script type="text/javascript">

        // convert the gallery server objects into a new lightweight object to aid with rendering of the gallery grid
        // and convert to json so the Knockout script can parse it and use it.
        var payload = @Html.Raw(JsonConvert.SerializeObject(galleries.Results.Select(g => new
                      {
                          g.CategoryId,
                          g.Id,
                          g.Name,
                          g.ThumbnailStorageId,
                          g.ImageCount,
                          CategoryName = Model.Name
                      })));

        // for high-dpi displays we need to request a larger image than the space we intend to view it in.
        // this ensures images are as crisp as they can be for each client device.
        function GetThumbnailUrl(storageId, element) {
            var cardInnerWidth = $(element).parent().parent().innerWidth();
            var cardInnerHeight = Math.round(cardInnerWidth / 1.52); // 1.52 is the ratio of height to width we'd like to show the image at
            var scaledWidth = Math.round(cardInnerWidth * window.devicePixelRatio);
            var scaledHeight = Math.round(cardInnerHeight * window.devicePixelRatio);
            return `/i/${storageId}?w=${scaledWidth}&h=${scaledHeight}&mode=crop`;
        }

        function GetGalleryUrl(categoryId, galleryId, name) {
            var encodedName = EncodeParamForUrl(name);
            return `/g/${categoryId}/${galleryId}/${encodedName}`;
        }

        // the view model that knockout uses to bind data to the html
        function ViewModel() {
            // parse the images from a json blob
            this.Galleries = ko.observableArray(payload);
        }

        $(document).ready(function() {
            ko.applyBindings(new ViewModel());
        });
    </script>
}
