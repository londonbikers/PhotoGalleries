@using System.Collections.Generic
@using System.Linq
@using LB.PhotoGalleries.Application.Models
@using Newtonsoft.Json
@model LB.PhotoGalleries.Application.Models.Gallery
@{
    ViewData["Title"] = ViewData.Model.Name;
    var images = (List<Image>) ViewData["images"];
    var user = (User) ViewData["user"];
    var megapixels = (int)ViewData["megapixels"];
    var thumbnailSize = 280;
}

<div class="text-center">
    <h1 class="display-4">@ViewData.Model.Name</h1>
    <p>@ViewData.Model.Description</p>
    
    <hr />
    <div class="row mb-3">
        <div class="col">
            <small class="text-muted">
                Created @ViewData.Model.Created.ToShortDateString() - by @user.Name - @images.Count photos

                @if (megapixels > 1)
                {
                    <text>(@($"{megapixels:n0}") megapixels)</text>
                }

            </small>
        </div>
    </div>

    <div class="row">
        <div class="col" data-bind="foreach: Images"><div class="grid-square-med"><a data-bind="attr: { href: GetImageUrl(GalleryId, Id, Name) }"><img data-bind="attr: { title: Name, src: GetThumbnailUrl(StorageId) }" width="@thumbnailSize" height="@thumbnailSize" /></a></div></div>
    </div>

    <div class="row">
        <div class="col">
            &nbsp;
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/lib/knockout/dist/knockout-3.5.1.js"></script>

    <script type="text/javascript">

        // convert the big image documents into a new lightweight object to aid with rendering the image grid
        // and convert to json so the Knockout script can parse it and use it.
        var payload = @Html.Raw(JsonConvert.SerializeObject(images.Select(i => new {i.Id, i.GalleryId, i.Name, i.StorageId})));
        var galleryId = '@Model.Id';

        // for high-dpi displays we need to request a larger image than the space we intend to view it in.
        // this ensures images are as crisp as they can be for each client device.
        function GetThumbnailUrl(storageId) {
            var scaledWidth = @thumbnailSize * window.devicePixelRatio;
            var scaledHeight = @thumbnailSize * window.devicePixelRatio;
            return `/i/${storageId}?w=${scaledWidth}&h=${scaledHeight}&mode=crop`;
        }

        function GetImageUrl(galleryId, imageId, name) {
            var encodedName = EncodeParamForUrl(name);
            return `/gi/${galleryId}/${imageId}/${encodedName}`;
        }

        // the view model that knockout uses to bind data to the html
        function ViewModel() {
            // parse the images from a json blob
            this.Images = ko.observableArray(payload);
        }

        $(document).ready(function() {
            ko.applyBindings(new ViewModel());
        });
    </script>
}