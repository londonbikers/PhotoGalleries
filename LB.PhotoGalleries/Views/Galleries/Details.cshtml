@using LB.PhotoGalleries.Application
@using LB.PhotoGalleries.Shared
@using Newtonsoft.Json
@using System.Linq

@model Gallery
@{
    ViewData["Title"] = ViewData.Model.Name;
    var category = Server.Instance.Categories.Categories.Single(c => c.Id == Model.CategoryId);
    var images = (List<Image>)ViewData["images"];
    var galleryUser = (User)ViewData["user"];
    var commentCount = Model.Comments.Count > 0 ? Model.Comments.Count + " " : string.Empty;
    var firstParagraph = Helpers.GetFirstParagraph(Model.Description);
    var subsequentParagraphs = Helpers.GetSubsequentParagraphs(Model.Description);
    var userId = Helpers.GetUserId(User);
    var user = User.Identity.IsAuthenticated ? await Server.Instance.Users.GetUserAsync(userId) : null;
    var subscribeToCommentRepliesParam = user != null && galleryUser?.CommunicationPreferences != null && galleryUser.CommunicationPreferences.ReceiveCommentNotifications ? " checked=\"checked\"" : null;
    var userIsSubscribedToCommentReplies = user != null && Model.UserCommentSubscriptions.Contains(user.Id);
}

<div class="text-center">
    <h1 class="display-4">@ViewData.Model.Name</h1>
    <div class="text-link text-left">
        <p>
            @firstParagraph @if (subsequentParagraphs.HasValue())
            {
                <span id="show-more">(<a href="#" data-bind="click: ToggleMoreDescription">see more</a>)</span>
            }
        </p>
        @if (subsequentParagraphs.HasValue())
        {
            <p id="subsequent-paras" class="text-format" style="display: none;">@subsequentParagraphs <span id="show-less">(<a href="#" data-bind="click: ToggleMoreDescription">see less</a>)</span></p>}
    </div>
    <hr />
    <div class="row mb-3">
        <div class="col">
            <span class="text-muted text-med-size">
                Shown in <a asp-controller="Categories" asp-action="Details" asp-route-name="@Helpers.EncodeParamForUrl(category.Name)">@category.Name</a>
                &#8729 Created @ViewData.Model.Created.ToShortDateString()
                @if (galleryUser != null)
                {
                    <text>&#8729 By </text>@galleryUser.Name
                }
                &#8729 @images.Count Photos
                &#8729
                <span style="white-space: nowrap;">
                    <a href="#comments">@commentCount<text> Comments</text></a>
                </span>
                @if (User.IsInRole(Roles.Administrator.ToString()) || User.IsInRole(Roles.Photographer.ToString()))
                {
                    <text>&#8729 </text>
                    <a asp-area="Admin" asp-controller="Galleries" asp-action="Edit" asp-route-id="@Model.Id" asp-route-pk="@Model.CategoryId" title="Edit Gallery">Edit</a>
                }
            </span>
        </div>
    </div>

    <div class="row mt-3" data-bind="foreach: Images">
        <div class="col-md-4">
            <div class="card mb-4 shadow-sm">
                <a data-bind="attr: { href: window.GetImageUrl(GalleryId, Id, Name) }"><img data-bind="attr: { title: Name, src: GetImageThumbnailUrl(Files, $element) }" class="img-fluid" /></a>
                <div class="card-body card-body-thin">
                    <span class="card-text" data-bind="text: Name"></span>
                    <div data-bind="visible: Count > 0" class="text-med-size mt-1">
                        <span data-bind="text: Count"></span> Comment<span data-bind="visible: Count > 1">s</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-3 pb-2">
        <a id="comments"></a>
        <p class="lead">
            <b>Comments</b>
        </p>

        @if (User.Identity.IsAuthenticated)
        {
            <div class="info-box mt-3">
                <form data-bind="submit: CreateComment">
                    <div class="form-group">
                        <textarea class="form-control" id="comment-postbox" rows="3" placeholder="Write your comment..." required></textarea>
                    </div>
                    <div class="row">
                        <div class="col-6 text-left post-box-bottom-row">

                            <input class="form-check-input" type="checkbox" id="get-notifications" @subscribeToCommentRepliesParam>
                            <label class="form-check-label" for="get-notifications">
                                Get notified of replies
                            </label>

                        </div>
                        <div class="col-6 text-right">
                            <button type="submit" class="btn btn-primary">Post Comment</button>
                        </div>
                    </div>
                </form>
            </div>
        }
        else
        {
            <text><a asp-controller="Home" asp-action="SignIn" asp-route-returnUrl="@Context.Request.Path">Sign-in</a> to leave a comment</text>
        }

        @if (userIsSubscribedToCommentReplies)
        {
            <div class="info-box info-box-light mt-2">
                You're subscribed to this gallery's comments. <a href="javascript:void(0)" data-bind="click:Unsubscribe">Unsubscribe</a>.
            </div>
        }

        <div class="mt-3">

            @if (Model.Comments.Count == 0)
            {
                <p class="lead">
                    Be the first to leave a comment
                </p>
            }

            @foreach (var comment in Model.Comments)
            {
                var commentUser = await Server.Instance.Users.GetUserAsync(comment.CreatedByUserId);
                var commentAnchorId = "c" + comment.Created.Ticks;
                <a id="@commentAnchorId"></a>
                <div class="row mb-4 text-left">
                    <div class="col">
                        @if (commentUser.PictureHostedUrl.HasValue())
                        {
                            <img src="@commentUser.PictureHostedUrl" width="50" title="@commentUser.Name" class="comment-user-pic rounded-circle" />
                        }
                        else
                        {
                            <div class="rounded-circle comment-user-pic comment-user-initials">@commentUser.Name.Substring(0, 1)</div>
                        }
                        <div class="text-med-size pt-2">
                            <b>@commentUser.Name</b><br />
                            <span class="text-muted">@comment.Created.ToShortDateString() @comment.Created.ToShortTimeString()</span>
                            @if (Helpers.CanUserEditComment(comment, Model, User))
                            {
                                <text>-</text>
                                <a href="javascript:void(0)" data-bind="click: function() { DeleteComment('@comment.Created.Ticks', '@comment.CreatedByUserId') }">delete</a>
                            }
                        </div>
                        <div class="pt-2 text-format no-float text-link">@comment.Text</div>
                    </div>
                </div>
            }

        </div>
    </div>

</div>

@section Scripts
{
    <script src="~/lib/knockout/dist/knockout-3.5.1.js"></script>
    <script src="~/lib/linkify/linkify.min.js"></script>
    <script src="~/lib/linkify/linkify-jquery.min.js"></script>

    <script type="text/javascript">

        // convert the big image documents into a new lightweight object to aid with rendering the image grid
        // and convert to json so the Knockout script can parse it and use it.
        var payload = @Html.Raw(JsonConvert.SerializeObject(images.Select(i => new {i.Id, i.GalleryId, i.Name, i.Metadata.Width, i.Metadata.Height, i.Files, i.Comments.Count})));
        var galleryId = '@Model.Id';

        // the view model that knockout uses to bind data to the html
        function ViewModel() {
            const self = this;

            // parse the images from a json blob
            self.Images = ko.observableArray(payload);

            self.CreateComment = function ()
            {
                var comment = $("#comment-postbox").val();
                var receiveNotifications = $("#get-notifications").prop("checked") === true;

                if (comment === '') {
                    console.log("CreateComment: no comment supplied.");
                    return;
                }

                $.post('/api/galleries/comments?categoryId=@Model.CategoryId&galleryId=@Model.Id', { comment: comment, receiveNotifications: receiveNotifications })
                    .done(function() {
                        // comment created, refresh the page to show new comment
                        location.reload();
                    })
                    .fail(function() {
                        console.log("something went wrong when creating a comment...");
                    });
            }

            self.DeleteComment = function (commentCreated, commentCreatedByUserId) {
                $.ajax({
                    url: `/api/galleries/comments?categoryId=@Model.CategoryId&galleryId=@Model.Id&commentCreatedTicks=${commentCreated}&commentCreatedByUserId=${commentCreatedByUserId}`,
                    type: 'DELETE'
                }).done(function () {
                    // comment created, refresh the page to show new comment
                    location.reload();
                }).fail(function(response) {
                    console.log("something went wrong when deleting the comment: " + response);
                });
            }

            self.Unsubscribe = function() {
                $.ajax({
                    url: '/api/galleries/comment-subscriptions?categoryId=@Model.CategoryId&galleryId=@Model.Id',
                    type: 'DELETE'
                }).done(function () {
                    // unsubscribed the user, refresh the page to show no sub info
                    // todo: show a nicer fading prompt instead of refreshing the page
                    location.reload();
                }).fail(function(response) {
                    console.log("something went wrong when unsubscribing from comment notifications: " + response);
                });
            }

            self.ToggleMoreDescription = function () {
                var $subsequentParas = $("#subsequent-paras");
                if ($subsequentParas.is(":visible")) {
                    $subsequentParas.slideUp();
                    $("#show-less").hide();
                    $("#show-more").show();
                } else {
                    $subsequentParas.slideDown();
                    $("#show-more").hide();
                    $("#show-less").show();
                }
            }
        }

        $(document).ready(function() {
            ko.applyBindings(new ViewModel());
        });
    </script>
}