@using Newtonsoft.Json
@using LB.PhotoGalleries.Application
@{
    ViewData["Title"] = "Search for " + ViewData["query"];
    var categories = (List<Category>)ViewData["categories"];
    var categoriesJson = categories != null ? JsonConvert.SerializeObject(categories.Select(c => new { c.Name })) : null;

    var galleries = (PagedResultSet<Gallery>)ViewData["galleries"];
    var galleriesJson = galleries != null ? JsonConvert.SerializeObject(galleries.Results.Select(g => new
    {
        g.CategoryId,
        g.Id,
        g.Name,
        g.ThumbnailFiles,
        g.ImageCount,
        CategoryName = Server.Instance.Categories.GetCategory(g.CategoryId).Name
    })) : null;

    var images = (PagedResultSet<Image>)ViewData["images"];
    var imagesJson = images != null ? JsonConvert.SerializeObject(images.Results.Select(i => new
    {
        i.Id,
        i.GalleryId,
        i.Name,
        i.Files
    })) : null;
}
<div class="text-center">
    <h4 class="display-4">Search Results</h4>
    <div class="text-format text-link">Showing search results for <b>@ViewData["query"]</b>.</div>
</div>

<hr />

@await Component.InvokeAsync("ImagePaginator", new { pagedResultSet = Model })

<div class="row" style="display: none;" data-bind="visible: Categories().length > 0">
    <div class="col text-center">
        <strong>Categories</strong> (<span data-bind="text: Categories().length"></span> result<span data-bind="visible: Categories().length > 1">s</span>) - <a href="#">show only categories</a>
        <div data-bind="foreach: Categories" class="mt-3">
            <a data-bind="text: Name, attr: { href: window.GetCategoryUrl(Name) }" class="btn btn-sm btn-outline-primary btn-v-spaced" role="button"></a>
        </div>
    </div>
</div>

<div class="row mt-3" style="display: none;" data-bind="visible: Galleries().length > 0">
    <div class="col text-center">
        <strong>Galleries</strong> (<span data-bind="text: GalleriesTotalResults"></span> result<span data-bind="visible: Galleries().length > 1">s</span>) - <a href="#">show only galleries</a>
    </div>
</div>

<div class="row mt-3" style="display: none;" data-bind="visible: Galleries().length > 0, foreach: Galleries">
    <div class="col-md-4">
        <div class="card mb-4 shadow-sm">
            <a data-bind="attr: { href: GetGalleryUrl(CategoryName, Id, Name) }"><img data-bind="attr: { title: Name, src: GetImageThumbnailUrl(ThumbnailFiles, $element) }" class="img-fluid" /></a>
            <div class="card-body">
                <p class="card-text" data-bind="text: Name"></p>
                <div class="d-flex justify-content-between align-items-center">
                    <small data-bind="text: CategoryName" class="text-muted"></small>
                    <small class="text-muted"><span data-bind="text: ImageCount"></span> photos</small>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row" data-bind="visible: Images().length > 0">
    <div class="col text-center">
        <strong>Photos</strong> (<span data-bind="text: ImagesTotalResults"></span> result<span data-bind="visible: Images().length > 1">s</span>) - <a href="#">show only photos</a>
    </div>
</div>

<div class="row mt-3" data-bind="visible: Images().length > 0, foreach: Images">
    <div class="col-md-4">
        <div class="card mb-4 shadow-sm">
            <a data-bind="attr: { href: window.GetImageUrl(GalleryId, Id, Name) }"><img data-bind="attr: { title: Name, src: GetImageThumbnailUrl(Files, $element) }" class="img-fluid" /></a>
            <div class="card-body card-body-thin">
                <p class="card-text" data-bind="text: Name"></p>
            </div>
        </div>
    </div>
</div>

<div class="text-center lead mt-4" style="display: none;" data-bind="visible: HaveCategories == false && Images().length === 0 && Galleries().length === 0">
    No results, sorry. Please try another search
</div>

@section Scripts
{
    <script src="~/lib/knockout/dist/knockout-3.5.1.js"></script>

    <script type="text/javascript">

        // convert the category, gallery and image server objects into lightweight objects to aid with their rendering
        // and convert to json so the Knockout script can parse it and use them.
        var categories = @Html.Raw(string.IsNullOrEmpty(categoriesJson) ? "[]" : categoriesJson);
        var galleries = @Html.Raw(string.IsNullOrEmpty(galleriesJson) ? "[]" : galleriesJson);
        var images = @Html.Raw(string.IsNullOrEmpty(imagesJson) ? "[]" : imagesJson);

        // the view model that knockout uses to bind data to the html
        function ViewModel() {
            const self = this;

            self.Categories = ko.observableArray(categories);

            // parse the galleries from a json blob
            self.Galleries = ko.observableArray(galleries);
            self.GalleriesTotalResults = @galleries.TotalResults;

            // parse the images from a json blob
            self.Images = ko.observableArray(images);
            self.ImagesTotalResults = @images.TotalResults;
        }

        $(document).ready(function() {
            ko.applyBindings(new ViewModel());
        });

    </script>
}
