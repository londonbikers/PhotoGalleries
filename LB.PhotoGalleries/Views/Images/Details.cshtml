@using LB.PhotoGalleries.Application.Models
@using Newtonsoft.Json
@model LB.PhotoGalleries.Application.Models.Image
@{
    ViewData["Title"] = ViewData.Model.Name;
    ViewData["useContainer"] = false;
    var gallery = (Gallery)ViewData["gallery"];
    var category = (Category)ViewData["category"];
}

<div class="container-max text-center">
    <img data-bind="class: GetImageClass(Image.Width, Image.Height, ImageContainerWidth, ImageContainerHeight), attr: {title: Image.Name, src: GetImageUrl(Image.StorageId, Image.Width, Image.Height, ImageContainerWidth, ImageContainerHeight), width: GetImageDimensions(Image.Width, Image.Height, ImageContainerWidth, ImageContainerHeight).width, height: GetImageDimensions(Image.Width, Image.Height, ImageContainerWidth, ImageContainerHeight).height}" />
</div>

<div class="container mt-3 text-center">
    
    <div class="info-box">
        <h6>@Model.Name</h6>
        <div>
            <small>Shown in: <a asp-controller="Categories" asp-action="Details" asp-route-name="@Utilities.EncodeParamForUrl(category.Name)">@category.Name</a> / <a asp-controller="Galleries" asp-action="Details" asp-route-categoryId="@gallery.CategoryId" asp-route-galleryId="@gallery.Id" asp-route-name="@Utilities.EncodeParamForUrl(gallery.Name)">@gallery.Name</a></small>
        </div>

        @if (!string.IsNullOrEmpty(Model.Caption))
        {
            <p>@Model.Caption</p>
        }

        @if (!string.IsNullOrEmpty(Model.Credit))
        {
            <div>
                <small>
                    @if (!Model.Credit.Contains('©'))
                    {
                        <text>Credit: </text>
                    }
                    @Model.Credit
                </small>
            </div>
        }
        
        @if (Model.Tags.Count > 0)
        {
            <div>
                @foreach (var tag in Model.Tags)
                {
                    <span class="badge badge-secondary">@tag</span>
                }
            </div>
        }
    </div>
    
    <div class="row">
        <div class="col">
            &nbsp;
        </div>
    </div>

</div>

@section Scripts
{
    <script src="~/lib/knockout/dist/knockout-3.5.1.js"></script>

    <script language="javascript">

        function GetImageUrl(storageId, imageWidth, imageHeight, imageContainerWidth, imageContainerHeight) {
            var dims = GetDpiScaledImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight);
            return `/i/${storageId}?w=${dims.width}&h=${dims.height}`;
        }

        function GetImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight) {

            // work out what size the original image would need to be to fit into the container space and return the width.
            // do not incorporate dpi-scaling as this is just for use on the IMG width attribute.

            // if the image is smaller than the container then just return the image size
            if (imageWidth <= imageContainerWidth && imageHeight <= imageContainerHeight) {
                console.log("source image is smaller than container, returning source image dimensions");
                return { width: imageWidth, height: imageHeight };
            }

            var widthRatio = imageWidth / imageContainerWidth;
            var heightFits = imageHeight / widthRatio <= imageContainerHeight;

            var heightRatio = imageHeight / imageContainerHeight;
            var widthFits = imageWidth / heightRatio <= imageContainerWidth;

            var width = 0;
            var height = 0;

            if (widthFits && !heightFits) {

                // resize by available height
                width = Math.round(imageWidth / heightRatio);
                height = imageContainerHeight;
                console.log("GetImageDimensions(): height doesn't fit, set height to container height and downsize width");


            } else if (heightFits && !widthFits) {

                // resize by available width
                width = imageContainerWidth;
                height = Math.round(imageHeight / widthRatio);
                console.log("GetImageDimensions(): width doesn't fit, set width to container width and downsize height");

            } else {
                // both fit. err?
                console.log("GetImageDimensions(): both dims fit. not sure what to do?");
            }

            return { width: width, height: height };
        }

        function GetDpiScaledImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight) {
            var dims = GetImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight);
            var ratio = window.devicePixelRatio;
            dims.width = Math.ceil(dims.width * ratio);
            dims.height = Math.ceil(dims.height * ratio);
            return dims;
        }

        function GetImageClass(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight) {

            var dims = GetImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight);

            // if the image is full width then don't show a border radius
            if (dims.width === imageContainerWidth) {
                console.log("GetImageClass(): image is full width, not showing radius");
                return null;
            }

            console.log("GetImageClass(): image is not full width, showing radius");
            return "rounded";
        }

        // the view model that knockout uses to bind data to the html
        function ViewModel() {

            // parse the image from a json blob
            this.Image = @Html.Raw(JsonConvert.SerializeObject(new {ViewData.Model.StorageId, ViewData.Model.Metadata.Width, ViewData.Model.Metadata.Height, ViewData.Model.Name}));

            console.log("window.devicePixelRatio: " + window.devicePixelRatio);
            console.log("original image width: " + this.Image.Width);
            console.log("original image height: " + this.Image.Height);

            this.ImageContainerWidth = $(".container-max").innerWidth();
            console.log("ImageContainerWidth: " + this.ImageContainerWidth);

            var pageHeight = $("html").innerHeight();
            var imageTop = $(".container-max").position().top;
            var usableHeight = Math.floor(pageHeight - imageTop - 10);

            console.log("usableHeight: " + usableHeight);
            this.ImageContainerHeight = usableHeight;
            console.log("ImageContainerHeight: " + this.ImageContainerHeight);
        }

        $(document).ready(function() {
            ko.applyBindings(new ViewModel());
        });

    </script>
}
