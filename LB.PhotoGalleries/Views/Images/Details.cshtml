@using Newtonsoft.Json
@model LB.PhotoGalleries.Application.Models.Image
@{
    ViewData["Title"] = ViewData.Model.Name;
}

<img data-bind="attr: {title: Image.Name, src: GetImageUrl(Image.StorageId, Image.Width, Image.Height, ImageContainerWidth, ImageContainerHeight), width: GetImageWidth(Image.Width, Image.Height, ImageContainerWidth), height: GetImageHeight(Image.Width, Image.Height, ImageContainerHeight)}" />

@section Scripts
{
    <script src="~/lib/knockout/dist/knockout-3.5.1.js"></script>

    <script language="javascript">

        function GetImageUrl(storageId, width, height, imageContainerWidth, imageContainerHeight) {
            if (width > height) {
                var scaledWidth = Math.round(imageContainerWidth * window.devicePixelRatio);
                console.log("GetImageUrl() - chosen landscape");
                return `/i/${storageId}?w=${scaledWidth}`;
            }

            var scaledHeight = Math.round(imageContainerHeight * window.devicePixelRatio);
            console.log("GetImageUrl() - chosen portrait");
            return `/i/${storageId}?h=${scaledHeight}`;
        }

        function GetImageWidth(width, height, imageContainerWidth) {
            if (width > height) {
                console.log("GetImageWidth() - chosen landscape");
                return imageContainerWidth;
            }

            console.log("GetImageWidth() - null");
            return null;
        }

        function GetImageHeight(width, height, imageContainerHeight) {
            if (height > width) {
                console.log("GetImageHeight() - chosen portrait");
                return imageContainerHeight;
            }

            console.log("GetImageHeight() - null");
            return null;
        }

        // the view model that knockout uses to bind data to the html
        function ViewModel() {
            // parse the image from a json blob
            this.Image = @Html.Raw(JsonConvert.SerializeObject(new {ViewData.Model.StorageId, ViewData.Model.Metadata.Width, ViewData.Model.Metadata.Height, ViewData.Model.Name}));;

            // for some reason innerWidth() is not incorporating padding, so we need to deduct that ourselves
            var container = $(".container");
            var paddingLeft = container.css('padding-left');
            paddingLeft = paddingLeft.substring(0, paddingLeft.length - 2);
            var paddingRight = container.css('padding-right');
            paddingRight = paddingRight.substring(0, paddingRight.length - 2);
            this.ImageContainerWidth = container.innerWidth() - paddingLeft - paddingRight;

            // using fixed values, because html/javascript gives me the stress when trying to dynamically determine this.
            // fixed values are for header and footer.
            this.ImageContainerHeight = $("html").innerHeight() - 50 - 30;

            console.log("image width: " + this.Image.Width);
            console.log("image height: " + this.Image.Height);
            console.log("ImageContainerHeight: " + this.ImageContainerHeight);
        }

        $(document).ready(function() {
            ko.applyBindings(new ViewModel());
        });

    </script>
}
