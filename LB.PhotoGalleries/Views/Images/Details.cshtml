@using LB.PhotoGalleries.Application
@using LB.PhotoGalleries.Application.Models
@using Newtonsoft.Json
@model LB.PhotoGalleries.Application.Models.Image
@{
    ViewData["Title"] = ViewData.Model.Name;
    ViewData["useContainer"] = false;
    var gallery = (Gallery)ViewData["gallery"];
    var category = (Category)ViewData["category"];
    var settingsToShow = !string.IsNullOrEmpty(Model.Metadata.Aperture) || !string.IsNullOrEmpty(Model.Metadata.ExposureTime) || Model.Metadata.Iso.HasValue;
    var cameraToShow = !string.IsNullOrEmpty(Model.Metadata.CameraModel) || !string.IsNullOrEmpty(Model.Metadata.LensMake) || !string.IsNullOrEmpty(Model.Metadata.LensModel);
    var locationToShow = Model.Metadata.LocationLatitude.HasValue && Model.Metadata.LocationLongitude.HasValue;
    var mapsKey = (string)ViewData["mapsKey"];
    var cameraInfo = Utilities.GetCameraName(Model);
    var previousImage = (Image)ViewData["previousImage"];
    var nextImage = (Image)ViewData["nextImage"];
    var photoLeftColClass = previousImage != null ? "class=\"col pointer\"" : "class=\"col\"";
    var photoRightColClass = nextImage != null ? "class=\"col pointer\"" : "class=\"col\"";
}

<div class="container-max text-center">
    
    <div id="photo-wrapper">
        <img data-bind="class: GetImageClass(Image.Width, Image.Height, ImageContainerWidth, ImageContainerHeight), attr: {title: Image.Name, src: GetImageUrl(Image.StorageId, Image.Width, Image.Height, ImageContainerWidth, ImageContainerHeight), width: GetImageDimensions(Image.Width, Image.Height, ImageContainerWidth, ImageContainerHeight).width, height: GetImageDimensions(Image.Width, Image.Height, ImageContainerWidth, ImageContainerHeight).height}"/>
        <div id="photo-overlay" class="photo-overlay-full-frame">
            
            <div class="row photo-overlay-full-frame">
                <div @Html.Raw(photoLeftColClass) id="photo-overlay-left">
                    
                    @if (previousImage != null)
                    {
                        <div id="photo-left-nav-box">
                            <svg width="32" height="32" viewBox="0 0 16 16" class="bi bi-arrow-left-square-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm9.5 8.5a.5.5 0 0 0 0-1H5.707l2.147-2.146a.5.5 0 1 0-.708-.708l-3 3a.5.5 0 0 0 0 .708l3 3a.5.5 0 0 0 .708-.708L5.707 8.5H11.5z"/>
                            </svg>
                        </div>
                    }

                </div>
                <div class="col-8" id="photo-overlay-middle">
                    
                    <div id="photo-middle-box">
                        <div id="photo-middle-box-inner">
                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-chevron-double-down" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M1.646 6.646a.5.5 0 0 1 .708 0L8 12.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                                <path fill-rule="evenodd" d="M1.646 2.646a.5.5 0 0 1 .708 0L8 8.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                            </svg>
                        </div>
                    </div>

                </div>
                <div @Html.Raw(photoRightColClass) id="photo-overlay-right">
                    
                    @if (nextImage != null)
                    {
                        <div id="photo-right-nav-box">
                            <svg width="32" height="32" viewBox="0 0 16 16" class="bi bi-arrow-right-square-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm2.5 8.5a.5.5 0 0 1 0-1h5.793L8.146 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708L10.293 8.5H4.5z"/>
                            </svg>
                        </div>
                    }

                </div>
            </div>
            

        </div>
    </div>

</div>

<div class="container mt-3 text-center">

    <div class="info-box">
        <h6>@Model.Name</h6>
        <div>
            <a asp-controller="Categories" asp-action="Details" asp-route-name="@Utilities.EncodeParamForUrl(category.Name)">@category.Name</a> / <a asp-controller="Galleries" asp-action="Details" asp-route-categoryId="@gallery.CategoryId" asp-route-galleryId="@gallery.Id" asp-route-name="@Utilities.EncodeParamForUrl(gallery.Name)">@gallery.Name</a>
        </div>

        @if (!string.IsNullOrEmpty(Model.Caption))
        {
            <div>@Model.Caption</div>
        }

        @if (Model.Tags.Count > 0)
        {
            <div class="mt-1">
                @foreach (var tag in Model.Tags)
                {
                    <span class="badge badge-secondary">@tag</span>
                }
            </div>
        }

        @if (!string.IsNullOrEmpty(Model.Credit))
        {
            <div>
                <small>
                    @if (!Model.Credit.Contains('©'))
                    {
                        <text>Credit </text>
                    }
                    @Model.Credit
                </small>
            </div>
        }
    </div>

    @if (settingsToShow || cameraToShow)
    {
        <div class="settings-box mt-3">

            <div class="row">
                @if (settingsToShow)
                {
                    <div class="col">
                        <b>Settings</b>
                        <br />

                        <div class="text-uppercase">

                            @if (!string.IsNullOrEmpty(Model.Metadata.Aperture))
                            {
                                <div class="setting-box">@Model.Metadata.Aperture</div>
                            }

                            @if (!string.IsNullOrEmpty(Model.Metadata.ExposureTime))
                            {
                                <div class="setting-box">@Model.Metadata.ExposureTime</div>
                            }

                            @if (Model.Metadata.Iso.HasValue)
                            {
                                <div class="setting-box">iso @Model.Metadata.Iso</div>
                            }

                        </div>

                        <a href="javascript:void(0);" data-toggle="modal" data-target="#metadataModal">show more info</a>

                    </div>
                }

                @if (cameraToShow)
                {
                    <div class="col">
                        <b>Camera</b>
                        <br />

                        @if (!string.IsNullOrEmpty(cameraInfo))
                        {
                            @cameraInfo
                        }

                        @if (!string.IsNullOrEmpty(Model.Metadata.LensMake) || !string.IsNullOrEmpty(Model.Metadata.LensModel))
                        {
                            <br />
                            @Model.Metadata.LensMake

                            if (!string.IsNullOrEmpty(Model.Metadata.LensModel))
                            {
                                <text> @Model.Metadata.LensModel</text>
                            }
                        }

                    </div>
                }
            </div>

        </div>
    }
    
    <div class="mt-3 pb-2">
        <h6>Comments</h6>
        
        <div class="info-box">
            <form data-bind="submit: createComment">
                <div class="form-group">
                    <textarea class="form-control" id="comment-postbox" rows="3" placeholder="Write your comment..."></textarea>
                </div>
                <div class="row">
                    <div class="col-9 text-left post-box-bottom-row">
                        <input class="form-check-input" type="checkbox" value="" id="get-notifications" required checked="checked">
                        <label class="form-check-label" for="get-notifications">
                            Get notification of replies
                        </label>
                    </div>
                    <div class="col-3 text-right">
                        <button type="submit" class="btn btn-primary">Post</button>
                    </div>
                </div>
            </form>
        </div>

        <div class="mt-3">
            
            @if (Model.Comments.Count == 0)
            {
                <p class="lead">
                    Be the first to leave a comment...
                </p>
            }

            @foreach (var comment in Model.Comments)
            {
                var user = await Server.Instance.Users.GetUserAsync(comment.CreatedByUserId);
                <div class="row mb-4 text-left">
                    <div class="col-1">profile pic</div>
                    <div class="col-11">
                        <div class="text-small">
                            <b>@user.Name</b> <span class="text-muted">- @comment.Created.ToShortDateString() @comment.Created.ToShortTimeString()</span>
                        </div>
                        <div class="mt-1 text-format">@comment.Text</div>
                    </div>
                </div>
            }

        </div>
    </div>

</div>

<div class="modal fade" id="metadataModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">More Deets</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <dl class="row">
                    @if (Model.Metadata.TakenDate.HasValue)
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.TakenDate)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.TakenDate)</dd>
                    }
                    @if (Model.Metadata.Width.HasValue && Model.Metadata.Height.HasValue)
                    {
                        <dt class="col-sm-4">Original Dimensions</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.Width) x @Html.DisplayFor(model => model.Metadata.Height)</dd>
                    }
                    @if (!string.IsNullOrEmpty(Model.Metadata.ExposureBias))
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.ExposureBias)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.ExposureBias)</dd>
                    }
                    @if (!string.IsNullOrEmpty(Model.Metadata.MeteringMode))
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.MeteringMode)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.MeteringMode)</dd>
                    }
                    @if (!string.IsNullOrEmpty(Model.Metadata.Flash))
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.Flash)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.Flash)</dd>
                    }
                    @if (!string.IsNullOrEmpty(Model.Metadata.FocalLength))
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.FocalLength)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.FocalLength)</dd>
                    }

                </dl>

                @if (locationToShow)
                {
                    <b>Location</b><br />
                    <a href="https://www.google.com/maps/search/?api=1&query=@Model.Metadata.LocationLatitude.Value,@Model.Metadata.LocationLongitude.Value" target="_blank" title="View location"><img class="rounded image-border" src="https://maps.googleapis.com/maps/api/staticmap?&zoom=13&size=250x150&maptype=roadmap&markers=size:tiny|@Model.Metadata.LocationLatitude.Value,@Model.Metadata.LocationLongitude.Value&key=@mapsKey" /></a>
                }

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/lib/knockout/dist/knockout-3.5.1.js"></script>

    <script language="javascript">

        function GetImageUrl(storageId, imageWidth, imageHeight, imageContainerWidth, imageContainerHeight) {
            var dims = GetDpiScaledImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight);
            return `/i/${storageId}?w=${dims.width}&h=${dims.height}`;
        }

        function GetImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight) {

            // work out what size the original image would need to be to fit into the container space and return the width.
            // do not incorporate dpi-scaling as this is just for use on the IMG width attribute.

            // if the image is smaller than the container then just return the image size
            if (imageWidth <= imageContainerWidth && imageHeight <= imageContainerHeight) {
                console.log("source image is smaller than container, returning source image dimensions");
                return { width: imageWidth, height: imageHeight };
            }

            var widthRatio = imageWidth / imageContainerWidth;
            var heightFits = imageHeight / widthRatio <= imageContainerHeight;

            var heightRatio = imageHeight / imageContainerHeight;
            var widthFits = imageWidth / heightRatio <= imageContainerWidth;

            var width = 0;
            var height = 0;

            if (widthFits && !heightFits) {

                // resize by available height
                width = Math.round(imageWidth / heightRatio);
                height = imageContainerHeight;
                console.log(
                    "GetImageDimensions(): height doesn't fit, set height to container height and downsize width");


            } else if (heightFits && !widthFits) {

                // resize by available width
                width = imageContainerWidth;
                height = Math.round(imageHeight / widthRatio);
                console.log(
                    "GetImageDimensions(): width doesn't fit, set width to container width and downsize height");

            } else {
                // both fit. err?
                console.log("GetImageDimensions(): both dims fit. not sure what to do?");
            }

            return { width: width, height: height };
        }

        function GetDpiScaledImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight) {
            var dims = GetImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight);
            var ratio = window.devicePixelRatio;
            dims.width = Math.ceil(dims.width * ratio);
            dims.height = Math.ceil(dims.height * ratio);
            return dims;
        }

        function GetImageClass(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight) {

            var dims = GetImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight);

            // if the image is full width then don't show a border radius
            if (dims.width === imageContainerWidth) {
                console.log("GetImageClass(): image is full width, not showing radius");
                return null;
            }

            console.log("GetImageClass(): image is not full width, showing radius");
            return "rounded";
        }

        // the view model that KnockoutJS uses to bind data and events to the html
        function ViewModel() {

            // parse the image from a json blob
            this.Image =
                @Html.Raw(JsonConvert.SerializeObject(new {ViewData.Model.StorageId, ViewData.Model.Metadata.Width, ViewData.Model.Metadata.Height, ViewData.Model.Name}));

            //console.log("window.devicePixelRatio: " + window.devicePixelRatio);
            //console.log("original image width: " + this.Image.Width);
            //console.log("original image height: " + this.Image.Height);

            this.ImageContainerWidth = $(".container-max").innerWidth();
            //console.log("ImageContainerWidth: " + this.ImageContainerWidth);

            var pageHeight = $("html").innerHeight();
            var imageTop = $(".container-max").position().top;
            var usableHeight = Math.floor(pageHeight - imageTop - 10);

            //console.log("usableHeight: " + usableHeight);
            this.ImageContainerHeight = usableHeight;
            //console.log("ImageContainerHeight: " + this.ImageContainerHeight);

            this.createComment = function() {
                var comment = $("#comment-postbox").val();
                if (comment === '') {
                    console.log("createComment: no comment supplied.");
                    return;
                }

                $.post('/api/images/comments?galleryId=@Model.GalleryId&imageId=@Model.Id', { comment: comment })
                    .done(function(response) {
                        console.log("comment created! refresh page...");
                        console.log(response);
                    })
                    .fail(function() {
                        console.log("something went wrong when creating a comment...");
                    });
            }
        }

        // jQuery stuff we need to wire up as soon as the dom is ready to be used
        $(document).ready(function() {
            ko.applyBindings(new ViewModel());

            // enable navigation to other images using photo overlay
            @if (previousImage != null)
            {
                <text>
                    $("#photo-overlay-left").click(function() {
                        NavigateToImage('@previousImage.GalleryId', '@previousImage.Id', '@previousImage.Name');
                    });
                </text>
            }

            @if (nextImage != null)
            {
                <text>
                    $("#photo-overlay-right").click(function() {
                        NavigateToImage('@nextImage.GalleryId', '@nextImage.Id', '@nextImage.Name');
                    });
                </text>
            }

            // handle keyboard navigation of images
            $(document).keydown(function(e) {
                // make sure we're not in focus of something that receives keyboard entry, i.e. comments post box
                // to come...

                if (e.keyCode === 37) {
                    // navigate to previous photo
                    @if (previousImage != null)
                    {
                        <text>NavigateToImage('@previousImage.GalleryId', '@previousImage.Id', '@previousImage.Name');</text>
                    }
                    else
                    {
                        <text>console.log("no previous image to nav to");</text>
                    }
                }

                if (e.keyCode === 39) {
                    // navigate to next photo
                    @if (nextImage != null)
                    {
                        <text>NavigateToImage('@nextImage.GalleryId', '@nextImage.Id', '@nextImage.Name');</text>
                    }
                    else
                    {
                        <text>console.log("no next image to nav to");</text>
                    }
                }
            });
        });

    </script>
}
