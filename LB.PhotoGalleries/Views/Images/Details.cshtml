@using LB.PhotoGalleries.Application.Models
@using Newtonsoft.Json
@model LB.PhotoGalleries.Application.Models.Image
@{
    ViewData["Title"] = ViewData.Model.Name;
    ViewData["useContainer"] = false;
    var gallery = (Gallery)ViewData["gallery"];
    var category = (Category)ViewData["category"];
    var settingsToShow = !string.IsNullOrEmpty(Model.Metadata.Aperture) || !string.IsNullOrEmpty(Model.Metadata.ExposureTime) || Model.Metadata.Iso.HasValue;
    var cameraToShow = !string.IsNullOrEmpty(Model.Metadata.CameraModel) || !string.IsNullOrEmpty(Model.Metadata.LensMake) || !string.IsNullOrEmpty(Model.Metadata.LensModel);
    var locationToShow = Model.Metadata.LocationLatitude.HasValue && Model.Metadata.LocationLongitude.HasValue;
    var mapsKey = (string)ViewData["mapsKey"];
    var cameraInfo = Utilities.GetCameraName(Model);
}

<div class="container-max text-center">
    <img data-bind="class: GetImageClass(Image.Width, Image.Height, ImageContainerWidth, ImageContainerHeight), attr: {title: Image.Name, src: GetImageUrl(Image.StorageId, Image.Width, Image.Height, ImageContainerWidth, ImageContainerHeight), width: GetImageDimensions(Image.Width, Image.Height, ImageContainerWidth, ImageContainerHeight).width, height: GetImageDimensions(Image.Width, Image.Height, ImageContainerWidth, ImageContainerHeight).height}" />
</div>

<div class="container mt-3 text-center">

    <div class="info-box">
        <h6>@Model.Name</h6>
        <div>
            <small><a asp-controller="Categories" asp-action="Details" asp-route-name="@Utilities.EncodeParamForUrl(category.Name)">@category.Name</a> / <a asp-controller="Galleries" asp-action="Details" asp-route-categoryId="@gallery.CategoryId" asp-route-galleryId="@gallery.Id" asp-route-name="@Utilities.EncodeParamForUrl(gallery.Name)">@gallery.Name</a></small>
        </div>

        @if (!string.IsNullOrEmpty(Model.Caption))
        {
            <div>@Model.Caption</div>
        }

        @if (!string.IsNullOrEmpty(Model.Credit))
        {
            <div>
                <small>
                    @if (!Model.Credit.Contains('©'))
                    {
                        <text>Credit: </text>
                    }
                    @Model.Credit
                </small>
            </div>
        }

        @if (Model.Tags.Count > 0)
        {
            <div>
                @foreach (var tag in Model.Tags)
                {
                    <span class="badge badge-secondary">@tag</span>
                }
            </div>
        }
    </div>


    @if (settingsToShow || cameraToShow)
    {
        <div class="settings-box mt-3">

            <div class="row">
                @if (settingsToShow)
                {
                    <div class="col">
                        <small><b class="text-muted">Settings</b></small>
                        <br />

                        <div class="text-uppercase text-small">

                            @if (!string.IsNullOrEmpty(Model.Metadata.Aperture))
                            {
                                @Model.Metadata.Aperture
                                <text>&nbsp;&nbsp;&nbsp;</text>
                            }

                            @if (!string.IsNullOrEmpty(Model.Metadata.ExposureTime))
                            {
                                @Model.Metadata.ExposureTime
                                <text>&nbsp;&nbsp;&nbsp;</text>
                            }

                            @if (Model.Metadata.Iso.HasValue)
                            {
                                <text>iso @Model.Metadata.Iso</text>
                            }

                        </div>

                        <small><a href="javascript:void(0);" data-toggle="modal" data-target="#metadataModal">Show more</a></small>
                        
                    </div>
                }

                @if (cameraToShow)
                {
                    <div class="col">
                        <small>
                            <b class="text-muted">Camera</b>
                            <br />

                            @if (!string.IsNullOrEmpty(cameraInfo))
                            {
                                @cameraInfo
                            }

                            @if (!string.IsNullOrEmpty(Model.Metadata.LensMake) || !string.IsNullOrEmpty(Model.Metadata.LensModel))
                            {
                                <br />
                                @Model.Metadata.LensMake

                                if (!string.IsNullOrEmpty(Model.Metadata.LensModel))
                                {
                                    <text> @Model.Metadata.LensModel</text>
                                }
                            }

                        </small>
                    </div>
                }

                @*@if (locationToShow)
                {
                    <div class="col">
                        <small><b class="text-muted">Location</b></small><br />
                        <a href="https://www.google.com/maps/search/?api=1&query=@Model.Metadata.LocationLatitude.Value,@Model.Metadata.LocationLongitude.Value" target="_blank" title="View location"><img class="rounded image-border" src="https://maps.googleapis.com/maps/api/staticmap?&zoom=13&size=50x50&maptype=roadmap&markers=size:tiny|@Model.Metadata.LocationLatitude.Value,@Model.Metadata.LocationLongitude.Value&key=@mapsKey" /></a>
                    </div>
                }*@

            </div>

        </div>
    }

    <div class="row">
        <div class="col">
            &nbsp;
        </div>
    </div>

</div>

<div class="modal fade" id="metadataModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">More Deets</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                
                <dl class="row">
                    @if (Model.Metadata.TakenDate.HasValue)
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.TakenDate)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.TakenDate)</dd>
                    }
                    @if (Model.Metadata.Width.HasValue && Model.Metadata.Height.HasValue)
                    {
                        <dt class="col-sm-4">Original Dimensions</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.Width) x @Html.DisplayFor(model => model.Metadata.Height)</dd>
                    }
                    @if (!string.IsNullOrEmpty(Model.Metadata.ExposureBias))
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.ExposureBias)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.ExposureBias)</dd>
                    }
                    @if (!string.IsNullOrEmpty(Model.Metadata.MeteringMode))
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.MeteringMode)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.MeteringMode)</dd>
                    }
                    @if (!string.IsNullOrEmpty(Model.Metadata.Flash))
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.Flash)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.Flash)</dd>
                    }
                    @if (!string.IsNullOrEmpty(Model.Metadata.FocalLength))
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.FocalLength)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.FocalLength)</dd>
                    }
                    
                </dl>
                
                @if (locationToShow)
                {
                    <b>Location</b><br />
                    <a href="https://www.google.com/maps/search/?api=1&query=@Model.Metadata.LocationLatitude.Value,@Model.Metadata.LocationLongitude.Value" target="_blank" title="View location"><img class="rounded image-border" src="https://maps.googleapis.com/maps/api/staticmap?&zoom=13&size=250x150&maptype=roadmap&markers=size:tiny|@Model.Metadata.LocationLatitude.Value,@Model.Metadata.LocationLongitude.Value&key=@mapsKey" /></a>
                }

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/lib/knockout/dist/knockout-3.5.1.js"></script>

    <script language="javascript">

        function GetImageUrl(storageId, imageWidth, imageHeight, imageContainerWidth, imageContainerHeight) {
            var dims = GetDpiScaledImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight);
            return `/i/${storageId}?w=${dims.width}&h=${dims.height}`;
        }

        function GetImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight) {

            // work out what size the original image would need to be to fit into the container space and return the width.
            // do not incorporate dpi-scaling as this is just for use on the IMG width attribute.

            // if the image is smaller than the container then just return the image size
            if (imageWidth <= imageContainerWidth && imageHeight <= imageContainerHeight) {
                console.log("source image is smaller than container, returning source image dimensions");
                return { width: imageWidth, height: imageHeight };
            }

            var widthRatio = imageWidth / imageContainerWidth;
            var heightFits = imageHeight / widthRatio <= imageContainerHeight;

            var heightRatio = imageHeight / imageContainerHeight;
            var widthFits = imageWidth / heightRatio <= imageContainerWidth;

            var width = 0;
            var height = 0;

            if (widthFits && !heightFits) {

                // resize by available height
                width = Math.round(imageWidth / heightRatio);
                height = imageContainerHeight;
                console.log("GetImageDimensions(): height doesn't fit, set height to container height and downsize width");


            } else if (heightFits && !widthFits) {

                // resize by available width
                width = imageContainerWidth;
                height = Math.round(imageHeight / widthRatio);
                console.log("GetImageDimensions(): width doesn't fit, set width to container width and downsize height");

            } else {
                // both fit. err?
                console.log("GetImageDimensions(): both dims fit. not sure what to do?");
            }

            return { width: width, height: height };
        }

        function GetDpiScaledImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight) {
            var dims = GetImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight);
            var ratio = window.devicePixelRatio;
            dims.width = Math.ceil(dims.width * ratio);
            dims.height = Math.ceil(dims.height * ratio);
            return dims;
        }

        function GetImageClass(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight) {

            var dims = GetImageDimensions(imageWidth, imageHeight, imageContainerWidth, imageContainerHeight);

            // if the image is full width then don't show a border radius
            if (dims.width === imageContainerWidth) {
                console.log("GetImageClass(): image is full width, not showing radius");
                return null;
            }

            console.log("GetImageClass(): image is not full width, showing radius");
            return "rounded";
        }

        // the view model that knockout uses to bind data to the html
        function ViewModel() {

            // parse the image from a json blob
            this.Image = @Html.Raw(JsonConvert.SerializeObject(new {ViewData.Model.StorageId, ViewData.Model.Metadata.Width, ViewData.Model.Metadata.Height, ViewData.Model.Name}));

            console.log("window.devicePixelRatio: " + window.devicePixelRatio);
            console.log("original image width: " + this.Image.Width);
            console.log("original image height: " + this.Image.Height);

            this.ImageContainerWidth = $(".container-max").innerWidth();
            console.log("ImageContainerWidth: " + this.ImageContainerWidth);

            var pageHeight = $("html").innerHeight();
            var imageTop = $(".container-max").position().top;
            var usableHeight = Math.floor(pageHeight - imageTop - 10);

            console.log("usableHeight: " + usableHeight);
            this.ImageContainerHeight = usableHeight;
            console.log("ImageContainerHeight: " + this.ImageContainerHeight);
        }

        $(document).ready(function() {
            ko.applyBindings(new ViewModel());
        });

    </script>
}
