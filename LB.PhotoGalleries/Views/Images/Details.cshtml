@using LB.PhotoGalleries.Application
@using LB.PhotoGalleries.Shared
@using Newtonsoft.Json
@model Image
@{
    ViewData["Title"] = ViewData.Model.Name;
    ViewData["useContainer"] = false;
    var gallery = (Gallery)ViewData["gallery"];
    var category = (Category)ViewData["category"];
    var settingsToShow = !string.IsNullOrEmpty(Model.Metadata.Aperture) || !string.IsNullOrEmpty(Model.Metadata.ExposureTime) || Model.Metadata.Iso.HasValue;
    var cameraToShow = !string.IsNullOrEmpty(Model.Metadata.CameraModel) || !string.IsNullOrEmpty(Model.Metadata.LensMake) || !string.IsNullOrEmpty(Model.Metadata.LensModel);
    var locationToShow = Model.Metadata.LocationLatitude.HasValue && Model.Metadata.LocationLongitude.HasValue;
    var mapsKey = (string)ViewData["mapsKey"];
    var cameraInfo = Helpers.GetCameraName(Model);
    var previousImage = (Image)ViewData["previousImage"];
    var nextImage = (Image)ViewData["nextImage"];
    var photoLeftColClass = previousImage != null ? "class=\"col pointer\"" : "class=\"col\"";
    var photoRightColClass = nextImage != null ? "class=\"col pointer\"" : "class=\"col\"";
}

<div class="container-max text-center">

    <div id="photo-wrapper" data-bind="style: { 'background': GetBackgroundImage(Image) }, class: GetImageClass(Image, ImageContainerWidth, ImageContainerHeight)">
        <div id="photo-wrapper-loader">
            <img id="image" class="img-fluid" data-bind="
                class: GetImageClass(Image, ImageContainerWidth, ImageContainerHeight),
                attr: {
                    title: Image.Name,
                    width: GetImageDimensions(Image, ImageContainerWidth, ImageContainerHeight).width,
                    height: GetImageDimensions(Image, ImageContainerWidth, ImageContainerHeight).height }" />
            <div id="photo-overlay" class="photo-overlay-full-frame" style="display: none;">
                <div class="row photo-overlay-full-frame">
                    <div @Html.Raw(photoLeftColClass) id="photo-overlay-left">
                        @if (previousImage != null)
                        {
                            <div id="photo-left-nav-box">
                                <svg width="32" height="32" viewBox="0 0 16 16" class="bi bi-arrow-left-square-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd" d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm9.5 8.5a.5.5 0 0 0 0-1H5.707l2.147-2.146a.5.5 0 1 0-.708-.708l-3 3a.5.5 0 0 0 0 .708l3 3a.5.5 0 0 0 .708-.708L5.707 8.5H11.5z" />
                                </svg>
                            </div>
                        }
                    </div>
                    <div class="col-8" id="photo-overlay-middle">
                        <div id="photo-middle-box">
                            <div id="photo-middle-box-inner">
                                <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-chevron-double-down" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd" d="M1.646 6.646a.5.5 0 0 1 .708 0L8 12.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
                                    <path fill-rule="evenodd" d="M1.646 2.646a.5.5 0 0 1 .708 0L8 8.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </div>
                        </div>
                    </div>
                    <div @Html.Raw(photoRightColClass) id="photo-overlay-right">
                        @if (nextImage != null)
                        {
                            <div id="photo-right-nav-box">
                                <svg width="32" height="32" viewBox="0 0 16 16" class="bi bi-arrow-right-square-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd" d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm2.5 8.5a.5.5 0 0 1 0-1h5.793L8.146 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708L10.293 8.5H4.5z" />
                                </svg>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<div class="container mt-3 text-center">

    <div class="info-box">
        @if (User.IsInRole(Roles.Administrator.ToString()) || User.IsInRole(Roles.Photographer.ToString()))
        {
            <div class="float-right">
                <a asp-area="Admin" asp-controller="Images" asp-action="Edit" asp-route-categoryId="@Model.GalleryCategoryId" asp-route-galleryId="@Model.GalleryId" asp-route-imageId="@Model.Id" title="Edit Photo"><img src="/img/edit.svg" width="20" class="image-fade" /></a>
            </div>
        }
        <h6>@Model.Name</h6>
        <div>
            <a asp-controller="Categories" asp-action="Details" asp-route-name="@Helpers.EncodeParamForUrl(category.Name)">@category.Name</a> /
            <a asp-controller="Galleries" asp-action="Details" asp-route-categoryName="@Helpers.EncodeParamForUrl(category.Name)" asp-route-galleryId="@gallery.Id" asp-route-name="@Helpers.EncodeParamForUrl(gallery.Name)">@gallery.Name</a>
        </div>

        @if (!string.IsNullOrEmpty(Model.Caption))
        {
            <div class="text-format text-link">@Model.Caption</div>
        }

        @if (Model.TagsCsv.HasValue())
        {
            <div class="mt-1">
                @foreach (var tag in Model.TagsCsv.Split(","))
                {
                    <a asp-controller="Tags" asp-action="Details" asp-route-tag="@tag" class="badge badge-secondary">@tag</a>
                }
            </div>
        }

        @if (!string.IsNullOrEmpty(Model.Credit))
        {
            <div>
                <small>
                    @if (!Model.Credit.Contains('©'))
                    {
                        <text>Credit </text>
                    }
                    @Model.Credit
                </small>
            </div>
        }

    </div>

    @if (settingsToShow || cameraToShow)
    {
        <div class="settings-box mt-3">

            <div class="row">
                @if (settingsToShow)
                {
                    <div class="col">
                        <b>Settings</b>
                        <br />

                        <div class="text-uppercase mt-2 mb-2">

                            @if (!string.IsNullOrEmpty(Model.Metadata.Aperture))
                            {
                                <div class="setting-box">@Model.Metadata.Aperture</div>
                            }

                            @if (!string.IsNullOrEmpty(Model.Metadata.ExposureTime))
                            {
                                <div class="setting-box">@Model.Metadata.ExposureTime</div>
                            }

                            @if (Model.Metadata.Iso.HasValue)
                            {
                                <div class="setting-box">iso @Model.Metadata.Iso</div>
                            }

                        </div>

                        <a href="javascript:void(0);" data-toggle="modal" data-target="#metadataModal">show more info</a>

                    </div>
                }

                @if (cameraToShow)
                {
                    <div class="col">
                        <b>Camera</b>
                        <div class="mt-2">

                            @if (!string.IsNullOrEmpty(cameraInfo))
                            {
                                @cameraInfo
                            }

                            @if (!string.IsNullOrEmpty(Model.Metadata.LensMake) || !string.IsNullOrEmpty(Model.Metadata.LensModel))
                            {
                                <br />
                                @Model.Metadata.LensMake

                                if (!string.IsNullOrEmpty(Model.Metadata.LensModel))
                                {
                                    <text> @Model.Metadata.LensModel</text>
                                }
                            }
                        </div>

                    </div>
                }
            </div>

        </div>
    }

    <div class="mt-3 pb-2">
        <h6><img src="/img/comments.svg" width="25" alt="comments icon" /> Comments</h6>

        @if (User.Identity.IsAuthenticated)
        {
            <div class="info-box mt-3">
                <form data-bind="submit: CreateComment">
                    <div class="form-group">
                        <textarea class="form-control" id="comment-postbox" rows="3" placeholder="Write your comment..." required></textarea>
                    </div>
                    <div class="row">
                        <div class="col-6 text-left post-box-bottom-row">
                            @*
                                <input class="form-check-input" type="checkbox" id="get-notifications" checked="checked">
                                <label class="form-check-label" for="get-notifications">
                                    Get notification of replies
                                </label>
                            *@
                        </div>
                        <div class="col-6 text-right">
                            <button type="submit" class="btn btn-primary">Post Comment</button>
                        </div>
                    </div>
                </form>
            </div>
        }
        else
        {
            <text><a asp-controller="Home" asp-action="SignIn" asp-route-returnUrl="@Context.Request.Path">Sign-in</a> to leave a comment</text>
        }

        <div class="mt-3">

            @if (Model.Comments.Count == 0)
            {
                <p class="lead">
                    Be the first to leave a comment
                </p>
            }

            @foreach (var comment in Model.Comments)
            {
                var commentUser = await Server.Instance.Users.GetUserAsync(comment.CreatedByUserId);
                <div class="row mb-4 text-left">
                    <div class="col">
                        @if (commentUser.PictureHostedUrl.HasValue())
                        {
                            <img src="@commentUser.PictureHostedUrl" width="50" title="@commentUser.Name" class="comment-user-pic rounded" />
                        }
                        else
                        {
                            <svg width="50" height="50" viewBox="0 0 16 16" class="bi bi-person-square comment-user-pic" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M14 1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z" />
                                <path fill-rule="evenodd" d="M2 15v-1c0-1 1-4 6-4s6 3 6 4v1H2zm6-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" />
                            </svg>
                        }
                        <div class="text-small pt-2">
                            <b>@commentUser.Name</b><br />
                            <span class="text-muted">@comment.Created.ToShortDateString() @comment.Created.ToShortTimeString()</span>
                            @if (Helpers.CanUserEditComment(comment, gallery, User))
                            {
                                <text>-</text>
                                <a href="javascript:void(0)" data-bind="click: function() { DeleteComment('@comment.Created.Ticks', '@comment.CreatedByUserId') }">delete</a>
                            }
                        </div>
                        <div class="pt-2 text-format no-float text-link">@comment.Text</div>
                    </div>
                </div>
            }

        </div>
    </div>

</div>

<div class="modal fade" id="metadataModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">More Deets</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <dl class="row">
                    @if (Model.Metadata.TakenDate.HasValue)
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.TakenDate)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.TakenDate)</dd>
                    }
                    @if (Model.Metadata.Width.HasValue && Model.Metadata.Height.HasValue)
                    {
                        <dt class="col-sm-4">Original Dimensions</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.Width) x @Html.DisplayFor(model => model.Metadata.Height)</dd>
                    }
                    @if (!string.IsNullOrEmpty(Model.Metadata.ExposureBias))
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.ExposureBias)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.ExposureBias)</dd>
                    }
                    @if (!string.IsNullOrEmpty(Model.Metadata.MeteringMode))
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.MeteringMode)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.MeteringMode)</dd>
                    }
                    @if (!string.IsNullOrEmpty(Model.Metadata.Flash))
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.Flash)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.Flash)</dd>
                    }
                    @if (!string.IsNullOrEmpty(Model.Metadata.FocalLength))
                    {
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Metadata.FocalLength)</dt>
                        <dd class="col-sm-9">@Html.DisplayFor(model => model.Metadata.FocalLength)</dd>
                    }
                </dl>

                @if (locationToShow)
                {
                    <b>Location</b><br />
                    <a href="https://www.google.com/maps/search/?api=1&query=@Model.Metadata.LocationLatitude.Value,@Model.Metadata.LocationLongitude.Value" target="_blank" title="View location"><img class="rounded image-border" src="https://maps.googleapis.com/maps/api/staticmap?&zoom=13&size=250x150&maptype=roadmap&markers=size:tiny|@Model.Metadata.LocationLatitude.Value,@Model.Metadata.LocationLongitude.Value&key=@mapsKey" /></a>
                }

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/lib/knockout/dist/knockout-3.5.1.js"></script>
    <script src="~/lib/linkify/linkify.min.js"></script>
    <script src="~/lib/linkify/linkify-jquery.min.js"></script>
    <script src="~/lib/jquery-touchswipe/jquery.touchSwipe.min.js"></script>

    <script language="javascript">

        function GetImageUrl(image, imageContainerWidth, imageContainerHeight) {
            const dims = GetDpiScaledImageDimensions(image, imageContainerWidth, imageContainerHeight);

            // choose an appropriate ImageFileSpec for scaled dimensions:
            // find first available image spec that is larger than scaled dims

            if (dims.width <= 800 && dims.height <= 800 && image.Files.Spec800Id != null) {
                //return `/di800/${image.Files.Spec800Id}?w=${dims.width}&h=${dims.height}`;
                return `/di800/${image.Files.Spec800Id}`;
            } else if (dims.width <= 1920 && dims.height <= 1920 && image.Files.Spec1920Id != null) {
                //return `/di1920/${image.Files.Spec1920Id}?w=${dims.width}&h=${dims.height}`;
                return `/di1920/${image.Files.Spec1920Id}`;
            } else if (dims.width <= 2560 && dims.height <= 2560 && image.Files.Spec2560Id != null) {
                //return `/di2560/${image.Files.Spec2560Id}?w=${dims.width}&h=${dims.height}`;
                return `/di2560/${image.Files.Spec2560Id}`;
            } else if (dims.width <= 3840 && dims.height <= 3840 && image.Files.Spec3840Id != null) {
                //return `/di3840/${image.Files.Spec3840Id}?w=${dims.width}&h=${dims.height}`;
                return `/di3840/${image.Files.Spec3840Id}`;
            } else {
                return `/dio/${image.Files.OriginalId}?w=${dims.width}&h=${dims.height}`;
            }
        }

        function GetImageDimensions(image, imageContainerWidth, imageContainerHeight) {

            // work out what size the original image would need to be to fit into the container space and return the width.
            // do not incorporate dpi-scaling as this is just for use on the IMG width attribute.

            // if the image is smaller than the container then just return the image size
            if (image.Width <= imageContainerWidth && image.Height <= imageContainerHeight) {
                //console.log("source image is smaller than container, returning source image dimensions");
                return { width: image.Width, height: image.Height };
            }

            const widthRatio = image.Width / imageContainerWidth;
            const heightFits = image.Height / widthRatio <= imageContainerHeight;

            const heightRatio = image.Height / imageContainerHeight;
            const widthFits = image.Width / heightRatio <= imageContainerWidth;

            var width = 0;
            var height = 0;

            if (widthFits && !heightFits) {

                // resize by available height
                width = Math.round(image.Width / heightRatio);
                height = imageContainerHeight;
                //console.log("GetImageDimensions(): height doesn't fit, set height to container height and downsize width");

            } else if (heightFits && !widthFits) {

                // resize by available width
                width = imageContainerWidth;
                height = Math.round(image.Height / widthRatio);
                //console.log("GetImageDimensions(): width doesn't fit, set width to container width and downsize height");

            } else {

                // both fit. err?
                console.log("GetImageDimensions(): both dims fit. not sure what to do?");

            }

            return { width: width, height: height };
        }

        function GetDpiScaledImageDimensions(image, imageContainerWidth, imageContainerHeight) {
            const dims = GetImageDimensions(image, imageContainerWidth, imageContainerHeight);
            const ratio = window.devicePixelRatio;
            dims.width = Math.ceil(dims.width * ratio);
            dims.height = Math.ceil(dims.height * ratio);
            return dims;
        }

        function GetImageClass(image, imageContainerWidth, imageContainerHeight) {

            const dims = GetImageDimensions(image, imageContainerWidth, imageContainerHeight);

            // if the image is full width then don't show a border radius
            if (dims.width === imageContainerWidth) {
                //console.log("GetImageClass(): image is full width, not showing radius");
                return null;
            }

            //console.log("GetImageClass(): image is not full width, showing radius");
            return "rounded";
        }

        // pre-loads the main image and only assigns it to the img tag when fully loaded.
        // this allows us to show the preview image and loader right up until the main image is ready to be shown.
        function LoadImage(image, imageContainerWidth, imageContainerHeight) {
            var imgPlaceholder = new Image();
            var imgTag = document.getElementById("image");

            imgPlaceholder.onload = function() {
                imgTag.src = img.src;
            };

            imgTag.src = GetImageUrl(image, imageContainerWidth, imageContainerHeight);
        }

        // the view model that KnockoutJS uses to bind data and events to the html
        function ViewModel() {

            const self = this;

            // parse the image from a json blob
            self.Image = @Html.Raw(JsonConvert.SerializeObject(new
                         {
                             Model.Files,
                             Model.Metadata.Width,
                             Model.Metadata.Height,
                             Model.Name
                         }));

            self.ImageContainerWidth = $(".container-max").innerWidth();
            const pageHeight = $(window).height();
            const imageTop = $(".container-max").position().top;
            const usableHeight = Math.floor(pageHeight - imageTop - 10);
            self.ImageContainerHeight = usableHeight;

            // mixing a data-bind on the img with this isn't conventional but not sure how to combine this all into data-binding.
            // should probably flip it and set the img up entirely from here and eschew conventional data-binding approach.
            LoadImage(self.Image, self.ImageContainerWidth, self.ImageContainerHeight);

            // work out if this is a mobile device or not and customise the ui accordingly
            if (window.IsMobileDevice()) {
                console.log("detected mobile device");
                $("#image").swipe({
                    allowPageScroll: 'horizontal',
                    swipe: function (event, direction, distance, duration, fingerCount, fingerData) {
                        @if (previousImage != null)
                        {
                             <text>
                                if (direction === 'right') {
                                    NavigateToImage('@previousImage.GalleryId', '@previousImage.Id', '@previousImage.Name');
                                 }
                             </text>
                        }

                        @if (nextImage != null)
                        {
                            <text>
                                if (direction === 'left') {
                                    NavigateToImage('@nextImage.GalleryId', '@nextImage.Id', '@nextImage.Name');
                                }
                            </text>
                        }
                    }
                });

            } else {
                // desktop overlay controls are hidden by default so show them as we're on a desktop device
                console.log("desktop device detected");
                $("#photo-overlay").show();
            }

            self.CreateComment = function() {
                var comment = $("#comment-postbox").val();
                var receiveNotifications = $("#get-notifications").prop("checked") === true;

                if (comment === '') {
                    console.log("CreateComment: no comment supplied.");
                    return;
                }

                $.post('/api/images/comments?galleryId=@Model.GalleryId&imageId=@Model.Id', { comment: comment, receiveNotifications: receiveNotifications })
                    .done(function() {
                        // comment created, refresh the page to show new comment
                        location.reload();
                    })
                    .fail(function() {
                        console.log("something went wrong when creating a comment...");
                    });
            }

            self.DeleteComment = function(commentCreated, commentCreatedByUserId) {
                $.ajax({
                    url: `/api/images/comments?categoryId=@category.Id&galleryId=@gallery.Id&imageId=@Model.Id&commentCreatedTicks=${commentCreated}&commentCreatedByUserId=${commentCreatedByUserId}`,
                    type: 'DELETE'
                }).done(function(response) {
                    // comment created, refresh the page to show new comment
                    location.reload();
                }).fail(function(response) {
                    console.log("something went wrong when deleting the comment: " + response);
                });
            }
        }

        // jQuery stuff we need to wire up as soon as the dom is ready to be used
        $(document).ready(function() {
            ko.applyBindings(new ViewModel());

            // enable navigation to other images using photo overlay
            @if (previousImage != null)
            {
                <text>
                    $("#photo-overlay-left").click(function() {
                        NavigateToImage('@previousImage.GalleryId', '@previousImage.Id', '@previousImage.Name');
                    });
                </text>
            }

            @if (nextImage != null)
            {
                <text>
                    $("#photo-overlay-right").click(function() {
                        NavigateToImage('@nextImage.GalleryId', '@nextImage.Id', '@nextImage.Name');
                    });
                </text>
            }

            // handle keyboard navigation of images
            $(document).keydown(function(e) {

                // make sure the comment post-box does not have focus right now
                if ($("#comment-postbox").is(":focus")) {
                    return;
                }

                if (e.keyCode === 37) {
                    // navigate to previous photo
                    @if (previousImage != null)
                    {
                        <text>NavigateToImage('@previousImage.GalleryId', '@previousImage.Id', '@previousImage.Name');</text>
                    }
                    else
                    {
                        <text>console.log("no previous image to nav to");</text>
                    }
                }

                if (e.keyCode === 39) {
                    // navigate to next photo
                    @if (nextImage != null)
                    {
                        <text>NavigateToImage('@nextImage.GalleryId', '@nextImage.Id', '@nextImage.Name');</text>
                    }
                    else
                    {
                        <text>console.log("no next image to nav to");</text>
                    }
                }
            });

            // convert all link text into anchors
            $(".text-link").linkify({
                target: "_blank"
            });
        });

    </script>
}
