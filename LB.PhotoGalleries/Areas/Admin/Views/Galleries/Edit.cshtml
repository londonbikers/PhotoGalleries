@using LB.PhotoGalleries.Application
@using LB.PhotoGalleries.Shared
@using Newtonsoft.Json
@model Gallery
@{
    ViewData["Title"] = "Edit Gallery";
    var error = (string)ViewData["error"];
    var success = (string)ViewData["success"];
    var images = (List<Image>)ViewData["images"];
    var createdByUser = (User)ViewData["createdByUser"];
    var isAuthorisedToEdit = (bool)ViewData["isAuthorisedToEdit"];
    var categoryNameForUrl = Helpers.EncodeParamForUrl(Server.Instance.Categories.Categories.Single(c => c.Id == Model.CategoryId).Name);
    var orderByFilenameDisabled = images.Any(q => !string.IsNullOrEmpty(q.Metadata.OriginalFilename)) ? "" : " disabled";
    var orderByTakenDateDisabled = images.Any(q => q.Metadata.TakenDate.HasValue) ? "" : " disabled";
}

@section Styles {
    <link rel="stylesheet" href="~/lib/dropzone/dist/dropzone.css" />
    <link rel="stylesheet" href="~/lib/dropzone/dist/basic.css" />
    <link rel="stylesheet" href="~/lib/bootstrap-tagsinput-master/dist/bootstrap-tagsinput.css" />
}

<h1>Edit Gallery</h1>
<div class="row">
    <div class="col">
        <a asp-action="Index">Back to List</a>
    </div>
    <div class="col text-right">
        <a asp-area="" asp-controller="Galleries" asp-action="Details" asp-route-galleryId="@Model.Id" asp-route-categoryName="@categoryNameForUrl" asp-route-name="@Helpers.EncodeParamForUrl(Model.Name)">View public gallery</a>
    </div>
</div>
<hr />

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}

@if (!string.IsNullOrEmpty(success))
{
    <div class="alert alert-success" role="alert">
        @success
    </div>
}

<div id="updated-gallery-banner" class="mt-1 alert alert-success" role="alert" style="display: none">
    Updated the gallery!
</div>

<div class="row">
    <div class="col">

        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <b>Category</b><br />
                @Server.Instance.Categories.Categories.Single(c => c.Id == Model.CategoryId).Name
                (<a asp-action="ChangeCategory" asp-route-pk="@Model.CategoryId" asp-route-id="@Model.Id">change</a>)
            </div>

            <div class="form-group">
                <b><label asp-for="Name" class="control-label"></label></b>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group">
                <b><label asp-for="Description" class="control-label"></label></b>
                <textarea class="form-control" rows="3" asp-for="Description"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="Active" /> @Html.DisplayNameFor(model => model.Active)
                </label>
            </div>

            @if (isAuthorisedToEdit)
            {
                <div class="form-group">
                    <a class="btn btn-danger" asp-action="Delete" asp-route-pk="@Model.CategoryId" asp-route-id="@Model.Id">
                        Delete
                    </a>
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
            }

        </form>

    </div>
    <div class="col">

        <dl class="row">
            <dt class="col-sm-12">
                @Html.DisplayNameFor(model => model.Created)
            </dt>
            <dd class="col-sm-12">
                
                <div id="created-label-div" data-bind="visible: !EditingCreated()">
                    <span data-bind="text: CreatedFormatted"></span>
                    @if (isAuthorisedToEdit)
                    {
                        <text>- </text><a href="#" data-bind="click: ShowCreatedEditForm" title="You can edit the created date to fit in historic galleries...">Edit</a>
                    }
                </div>

                <form class="form-inline" id="edit-label-form" data-bind="submit: UpdateCreated, visible: EditingCreated" style="display: none;">
                    <div class="form-group mr-sm-3 mb-2 mt-1">
                        <input class="form-control" data-bind="value: Gallery.Created" />
                    </div>
                    <button type="submit" class="btn btn-outline-primary mb-2 mr-2">Update</button>
                    <button class="btn btn-outline-secondary mb-2" data-bind="click: CancelCreatedEditForm">Cancel</button>
                </form>

            </dd>

            @if (createdByUser != null)
            {
                <dt class="col-sm-12">
                    @Html.DisplayNameFor(model => model.CreatedByUserId)
                </dt>
                <dd class="col-sm-12">
                    @Html.ActionLink(createdByUser.Name, "Details", "Users", new { id = Model.CreatedByUserId })
                </dd>
            }

            <dt class="col-sm-12">
                @Html.DisplayNameFor(model => model.Comments)
            </dt>
            <dd class="col-sm-12">
                @Model.Comments.Count
            </dd>

            <dt class="col-sm-12">
                Images
            </dt>
            <dd class="col-sm-12">
                @images.Count
            </dd>

            @if (Model.LegacyNumId > 0)
            {
                <dt class="col-sm-12">
                    @Html.DisplayNameFor(model => model.LegacyNumId)
                </dt>
                <dd class="col-sm-12">
                    @Html.DisplayFor(model => model.LegacyNumId)
                </dd>
            }

            @if (Model.LegacyGuidId.HasValue && Model.LegacyGuidId != Guid.Empty)
            {
                <dt class="col-sm-12">
                    @Html.DisplayNameFor(model => model.LegacyGuidId)
                </dt>
                <dd class="col-sm-12">
                    @Html.DisplayFor(model => model.LegacyGuidId)
                </dd>
            }

        </dl>

        @if (User.IsInRole(Roles.Administrator.ToString()))
        {
            <button data-bind="click: function() { GenerateImageFiles(); }" class="btn btn-outline-secondary btn-sm">Generate images</button>
            <button data-bind="click: function() { DeletePreGenImages(); }" class="btn btn-outline-secondary btn-sm">Delete pre-gen images</button>
        }

    </div>
</div>

<div class="row">
    <div class="col pb-2">
        <div id="dropzone">
            <form asp-controller="Images" asp-action="Upload" asp-route-categoryId="@Model.CategoryId" asp-route-galleryId="@Model.Id" class="dropzone needsclick dz-clickable" id="uploader">
                <div class="dz-message needsclick">
                    Drop files here or click to upload.<br>
                </div>
            </form>
        </div>
    </div>
</div>

@if (images.Count > 0)
{
    <h2>Images</h2>

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link active" id="show-ordering-tab-link" href="javascript:void(0);" data-bind="click: ShowOrderingTab">Order Images</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="show-manage-tags-tab-link" href="javascript:void(0);" data-bind="click: ShowManageTagsTab">Update Images</a>
        </li>
    </ul>

    <div id="ordering-tab">
        
        <div class="mt-3 mb-3 float-left">
            <button type="button" class="btn btn-outline-secondary btn-sm" data-bind="click: OrderImagesByName">Order by Name</button>
            <button type="button" class="btn btn-outline-secondary btn-sm" data-bind="click: function() { OrderImagesByFileName() }"@orderByFilenameDisabled>Order by Filename</button>
            <button type="button" class="btn btn-outline-secondary btn-sm" data-bind="click: function() { OrderImagesByDateCaptured() }"@orderByTakenDateDisabled>Order by Capture Date</button>
        </div>

        <div class="mt-3 mb-3 float-right">
            <a href="#" data-bind="click: function() { SetThumbnailSize('small') }"><img src="/img/photo.svg" width="15"/></a>
            <a href="#" data-bind="click: function() { SetThumbnailSize('medium') }"><img src="/img/photo.svg" width="20"/></a>
            <a href="#" data-bind="click: function() { SetThumbnailSize('large') }"><img src="/img/photo.svg" width="25"/></a>
        </div>

        <div id="card-container" class="float-clear row mt-3" data-bind="sortable: { foreach: Images, options: { onEnd: OnImageMoved } }">
            <div class="col-md-4" data-bind="attr: { id: 'gi-'+Id }">
                <div class="card mb-4 shadow-sm">
                    <a data-bind="attr: { href: GetImageEditUrl(Id) }"><img data-bind="attr: { title: Name, src: GetImageThumbnailUrl(Files, $element) }" class="img-fluid"/></a>
                    <div class="card-body card-body-thin text-center">
                        <p class="card-text" data-bind="text: Name"></p>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <div id="manage-tags-tab" style="display: none;">

        <div class="mt-3">

            <div class="mb-2">
                <a href="#" id="show-update-all-images-link" class="link-disabled" data-bind="click: function(){ ToggleUpdateImagesTopControl('update-all-images-div'); }">Update all images</a> &#8729;
                <a href="#" id="show-remove-tags-link" data-bind="click: function(){ ToggleUpdateImagesTopControl('remove-tags-div'); }">Remove tags</a>
            </div>

            <div id="update-all-images-div" class="info-box">

                <form data-bind="submit: UpdateAllImages">
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <input type="text" class="form-control" id="bulk-name" placeholder="Update name...">
                        </div>
                        <div class="form-group col-md-6">
                            <input type="text" class="form-control" id="bulk-credit" placeholder="Update credit...">
                            <div class="mt-2 form-check">
                                <input class="form-check-input" type="checkbox" id="bulk-credit-delta-yn" checked="checked">
                                <label class="form-check-label" for="bulk-credit-delta-yn">Just add missing credits?</label>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control form-control-sm" id="bulk-tags" placeholder="Add tags...">
                    </div>
                    <button type="submit" class="btn btn-secondary btn-sm mb-2" id="updateAllImagesBtn">Update all images</button>
                </form>

                <div id="bulk-update-banner" class="alert alert-success mt-2" role="alert" style="display: none">
                    All images have been updated!
                </div>
            </div>
            <div id="remove-tags-div" style="display: none;">
                <div>
                    <div id="remove-tags-div" class="mt-1">
                        <input type="text" name="remove-tags" id="remove-tags" />
                        <div class="form-text text-small text-muted mt-1">
                            <img src="/img/info-circle.svg" width="12" class="image-fade" alt="info" />
                            These are all the tags used across the gallery. Removing tags here removes them from any images they're use in. Don't add tags.
                        </div>
                    </div>
                </div>
                <div id="remove-tags-banner" class="mt-1 alert alert-success" role="alert" style="display: none">
                    Tag <span id="removed-tag"></span> removed.
                </div>
            </div>

        </div>

        <div class="mb-2 mt-4">
            Filter Images:
        </div>
        <form class="form-inline">
            <div class="form-group mb-2">
                <input type="text" class="form-control form-control" id="filter-term" placeholder="Term..." data-bind="event: { keyup: FilterByTerm }">
            </div>
            <div class="form-group mx-sm-3 mb-2">
                or&nbsp;&nbsp;&nbsp;<select id="filter-tag" data-bind="options: AllTags, optionsCaption: 'Select a tag...', event:{ change: FilterByTag }" class="form-control"></select>
            </div>
        </form>

        <div id="update-images-images" class="mt-3 row" data-bind="foreach: FilteredImages">
            <div class="col-md-6">
                <div class="row">
                    <div class="col-3 p-2">
                        <a data-bind="attr: { href: GetImageEditUrl(Id) }"><img data-bind="attr: { title: Name, src: GetImageThumbnailUrl(Files, $element) }" class="img-fluid" /></a>
                    </div>
                    <div class="col-9">
                        <div data-bind="text: Name" class="mb-1"></div>
                        <input type="text" data-bind="value: TagsCsv(), tags: TagsCsv, attr: { id: 'uit-'+Id }" />
                    </div>
                </div>
            </div>
        </div>

    </div>
}

@section Scripts
{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script src="~/lib/dropzone/dist/min/dropzone.min.js"></script>
    <script src="~/lib/knockout/dist/knockout-3.5.1.js"></script>
    <script src="~/lib/sortable/dist/Sortable.min.js"></script>
    <script src="~/lib/knockout-sortable/dist/knockout-sortable.js"></script>
    <script src="~/lib/bootstrap-tagsinput-master/dist/bootstrap-tagsinput.js"></script>
    <script src="~/js/image.js"></script>
    <script src="~/js/models/gallery.js"></script>

    <script type="text/javascript">

        // convert the big image documents into a new lightweight object to aid with rendering the image grid
        // and convert to json so the Knockout script can parse it and use it.

        var galleryPayload = @Html.Raw(JsonConvert.SerializeObject(Model));
        var imagesPayload = @Html.Raw(JsonConvert.SerializeObject(Utilities.OrderImages(images).Select(i => new {i.Id, i.GalleryId, i.Name, i.Metadata.Width, i.Metadata.Height, i.Files, i.TagsCsv})));
        var galleryId = '@Model.Id';

        function OnImageMoved(evt) {
            const imageBeingMovedId = evt.item.id.substring(3);
            const imageBeingMovedNewPosition = evt.newIndex;
            console.log(`OnImageMoved() ${imageBeingMovedId} moved to position: ${imageBeingMovedNewPosition}`);

            // send new position to api...
            $.post(`/api/images/set-position?galleryId=${galleryId}&imageId=${imageBeingMovedId}&position=${imageBeingMovedNewPosition}`)
                .done(function() {
                    console.log("image ordering post-back done!");
                })
                .fail(function() {
                    // returning false on OnImageMoved() is meant to cancel the move, but it doesn't seem to work
                    console.log("oh no, something went wrong with ordering post-back!");
                    return false;
                });
        }

        function GetImageEditUrl(imageId) {
            return `../../../images/edit/@Model.CategoryId/@Model.Id/${imageId}`;
        }

        // the view model that knockout uses to bind data to the html
        function ViewModel() {
            var vm = this;

            // convert the json payload into an observable array so we can track changes
            vm.Gallery = new GalleryModel(galleryPayload);
            vm.Images = ko.observableArray();
            imagesPayload.forEach(i => vm.Images.push(new ImageModel(i)));

            vm.EditingCreated = ko.observable(false);
            vm.CreatedFormatted = ko.computed(function() {
                return window.moment(vm.Gallery.Created()).format(window._longDateFormat);
            }, vm);

            // dynamically calculate the distinct tags in use across the gallery images
            vm.AllTags = ko.pureComputed(function() {
                var allTags = [];
                vm.Images().forEach(function(image) {

                    if (image.TagsCsv() !== null) {
                        const tags = image.TagsCsv().split(',');
                        tags.forEach(function(tag) {
                            if (!allTags.includes(tag)) {
                                allTags.push(tag);
                            }
                        });
                    }

                });
                return allTags;
            });

            vm.UpdateAllImages = function() {
                const name = $("#bulk-name").val();
                const credit = $("#bulk-credit").val();
                const creditJustFillInBlanks = $("#bulk-credit-delta-yn").prop('checked');
                const tags = $("#bulk-tags").val();

                if (name === '' && credit === '' && tags === '') {
                    console.log("UpdateAllImages: no name, credit or tag supplied.");
                    return;
                }

                // update all Image models so the UI updates
                var individualTags = tags.split(',');
                vm.Images().forEach(function(i) {
                    individualTags.forEach(function(tag) {
                        i.TagsCsv(window.AddTagToCsv(i.TagsCsv(), tag));
                    });
                });

                // add the new tag to all taginputs
                $("[id^=uit-").each(function() {
                    individualTags.forEach(t => $(this).tagsinput('add', t));
                });

                $.post('/api/images/bulk-update?categoryId=@Model.CategoryId&galleryId=@Model.Id', { bulkName: name, bulkCredit: credit, bulkCreditOnlyAddWhenMissing: creditJustFillInBlanks, bulkTags: tags })
                    .done(function() {
                        // images updated

                        // if the name was updated, we need to refresh the page as the photo names won't auto update (should move them to a knockout view)
                        if (name !== '') {
                            location.reload();
                        }

                        // clear the form
                        $("#bulk-name").val(null);
                        $("#bulk-credit").val(null);
                        $("#bulk-tags").tagsinput('removeAll');

                        // show a fading banner
                        var banner = $("#bulk-update-banner");
                        banner.show();
                        setTimeout(function() { banner.fadeOut('slow'); }, 5000);
                    })
                    .fail(function() {
                        console.log("UpdateAllImages: something went wrong when updating all images...");
                    });
            }

            vm.GenerateImageFiles = function() {
                console.log('GenerateImageFiles()');
                $.post('/api/images/generate-image-files?galleryId=@Model.Id')
                    .done(function(responses) {
                        console.log("GenerateImageFiles(): done");
                        console.log(responses);
                    })
                    .fail(function() {
                        console.log("GenerateImageFiles(): something went wrong");
                    });
            }

            vm.OrderImagesByName = function (data, event) {
                console.log('OrderImagesByName()');
                event.target.disabled = true;
                $.ajax({
                    url: '/api/galleries/order-images?categoryId=@Model.CategoryId&galleryId=@Model.Id&by=name',
                    type: 'PUT'
                }).done(function(responses) {
                    window.location.reload(true);
                }).fail(function() {
                    console.log("OrderImagesByName(): something went wrong");
                });
            }

            vm.OrderImagesByFileName = function() {
                console.log('OrderImagesByFileName()');
                event.target.disabled = true;
                $.ajax({
                    url: '/api/galleries/order-images?categoryId=@Model.CategoryId&galleryId=@Model.Id&by=filename',
                    type: 'PUT'
                }).done(function(responses) {
                    window.location.reload(true);
                }).fail(function() {
                    console.log("OrderImagesByFileName(): something went wrong");
                });
            }

            vm.OrderImagesByDateCaptured = function() {
                console.log('OrderImagesByDateCaptured()');
                event.target.disabled = true;
                $.ajax({
                    url: '/api/galleries/order-images?categoryId=@Model.CategoryId&galleryId=@Model.Id&by=takendate',
                    type: 'PUT'
                }).done(function(responses) {
                    window.location.reload(true);
                }).fail(function() {
                    console.log("OrderImagesByDateCaptured(): something went wrong");
                });
            }

            vm.DeletePreGenImages = function() {
                console.log('DeletePreGenImages()');
                $.post('/api/images/delete-pregen-image-files?categoryId=@Model.CategoryId&galleryId=@Model.Id')
                    .done(function(responses) {
                        console.log("DeletePreGenImages(): done");
                        console.log(responses);
                    })
                    .fail(function() {
                        console.log("DeletePreGenImages(): something went wrong");
                    });
            }

            vm.ShowOrderingTab = function() {
                $("#show-ordering-tab-link").toggleClass("active");
                $("#show-manage-tags-tab-link").toggleClass("active");
                $("#ordering-tab").show();
                $("#manage-tags-tab").hide();
            }

            vm.ShowManageTagsTab = function() {
                $("#show-ordering-tab-link").toggleClass("active");
                $("#show-manage-tags-tab-link").toggleClass("active");
                $("#ordering-tab").hide();
                $("#manage-tags-tab").show();
            }

            vm.SetThumbnailSize = function(size) {
                if (size === 'small') {
                    $(".card").css('width', 175);
                    $(".card-body").hide();
                    $("#card-container").children().removeClass('col-md-4 col-md-3').addClass('col-md-2');
                } else if (size === 'medium') {
                    $(".card").css('width', 268);
                    $(".card-body").show().css('font-size', '0.75rem');
                    $("#card-container").children().removeClass('col-md-2 col-md-4').addClass('col-md-3');
                } else {
                    $(".card").css('width', 368);
                    $(".card-body").show().css('font-size', '1rem');
                    $("#card-container").children().removeClass('col-md-2 col-md-3').addClass('col-md-4');
                }
            }

            vm.ToggleUpdateImagesTopControl = function(controlId) {
                if (controlId === 'update-all-images-div') {
                    $("#show-update-all-images-link").addClass('link-disabled');
                    $("#show-remove-tags-link").removeClass('link-disabled');
                    $("#update-all-images-div").show();
                    $("#remove-tags-div").hide();
                } else {
                    $("#show-update-all-images-link").removeClass('link-disabled');
                    $("#show-remove-tags-link").addClass('link-disabled');
                    $("#update-all-images-div").hide();
                    $("#remove-tags-div").show();
                }
                return false;
            }
            
            vm.ShowCreatedEditForm = function () {
                vm.EditingCreated(true);
            }

            vm.UpdateCreated = function() {
                console.log("updating created...");
                var ticks = window.DateToTicks(vm.Gallery.Created());

                // put to server
                $.ajax({
                    url: `/api/galleries/update-created?categoryId=@Model.CategoryId&galleryId=@Model.Id&created=${ticks}`,
                    type: 'PUT'
                }).done(function (response) {
                    var banner = $("#updated-gallery-banner");
                    banner.show();
                    setTimeout(function () { banner.fadeOut('slow'); }, 5000);
                }).fail(function(response) {
                    console.log(`something went wrong when updating server with new created: ${ticks}:`);
                    console.log(response);
                });

                vm.EditingCreated(false);
            }

            vm.CancelCreatedEditForm = function() {
                vm.EditingCreated(false);
            }

            // allow the user to search by text or tag
            vm.Filter = ko.observable();
            vm.FilterByTag = function(viewModel, event) {
                $("#filter-term").val(null);
                const selectedTag = $(event.target).val();
                if (selectedTag) {
                    vm.Filter(`tag:${selectedTag}`);
                } else {
                    vm.Filter(null);
                }
            }

            vm.FilterByTerm = function(viewModel, event) {
                $("#filter-tag").prop('selectedIndex', 0);
                console.log(`term: ${$(event.target).val()}`);
                vm.Filter($(event.target).val());
            }

            vm.FilteredImages = ko.pureComputed(function() {
                if (!vm.Filter()) {
                    return vm.Images();
                } else {
                    if (vm.Filter().startsWith('tag:')) {
                        var tag = vm.Filter().substring(4).toLowerCase();
                        console.log(`tag: ${tag}`);
                        return ko.utils.arrayFilter(vm.Images(),
                            function(i) {
                                return window.TagsCsvContains(i.TagsCsv(), tag);
                            });
                    } else {
                        return ko.utils.arrayFilter(vm.Images(),
                            function(i) {
                                return i.Name().toLowerCase().includes(vm.Filter().toLowerCase());
                            });
                    }
                }
            });

            // wire up individual image tags input elements
            ko.bindingHandlers.tags = {
                init: function(element) {
                    $(element).tagsinput({
                        trimValue: true,
                        forceLowerCase: true
                    });

                    $(element).on('itemAdded', function (event)
                    {
                        var tag = event.item;
                        for (let x = 0; x < vm.Images().length; x++) {
                            const i = vm.Images()[x];
                            if (i.Id === event.target.id.substring(4)) {
                                i.TagsCsv(window.AddTagToCsv(i.TagsCsv(), tag));
                                console.log(`added tag '${tag}' to ${i.Id}`);

                                // push change to server
                                $.post(`/api/images/add-tag?galleryId=${i.GalleryId}&imageId=${i.Id}&tag=${tag}`)
                                    .done(function() {
                                        console.log(`pushed new tag '${tag}' to server`);
                                    })
                                    .fail(function() {
                                        console.log(`oh no, something went wrong with pushing the '${tag}' tag to the server!`);
                                    });

                                return;
                            }
                        }
                    });

                    $(element).on('itemsAdded', function (event)
                    {
                        const tags = event.item;
                        const tagsCsv = tags.join(",");

                        // find the image the tags are being applied to
                        for (let x = 0; x < vm.Images().length; x++)
                        {
                            const i = vm.Images()[x];
                            if (i.Id === event.target.id.substring(4))
                            {
                                for (let y = 0; y < tags.length; y++) {
                                    const tag = tags[y];
                                    i.TagsCsv(window.AddTagToCsv(i.TagsCsv(), tag));
                                    console.log(`itemsAdded(): added tag '${tag}' to ${i.Id}`);
                                }

                                // push changes to server
                                $.post(`/api/images/add-tags?galleryId=${i.GalleryId}&imageId=${i.Id}&tags=${tagsCsv}`)
                                    .done(function() {
                                        console.log(`itemsAdded(): pushed new tags '${tagsCsv}' to server`);
                                    })
                                    .fail(function() {
                                        console.log(`itemsAdded(): oh no, something went wrong with pushing the '${tagsCsv}' tags to the server!`);
                                    });

                                return;
                            }
                        }
                    });

                    $(element).on('itemRemoved',
                        function(event) {
                            var tag = event.item;
                            for (let x = 0; x < vm.Images().length; x++) {
                                const i = vm.Images()[x];
                                if (i.Id === event.target.id.substring(4)) {
                                    i.TagsCsv(RemoveTagFromCsv(i.TagsCsv(), tag));

                                    console.log(`removed tag '${tag}' from ${i.Id}`);
                                    if (event.options && event.options.preventPost) {
                                        console.log("preventing tag removal post-back");
                                        return;
                                    }

                                    // push change to server
                                    $.ajax({
                                        url: `/api/images/remove-tag?galleryId=${i.GalleryId}&imageId=${i.Id}&tag=${tag}`,
                                        type: 'DELETE'
                                    }).done(function() {
                                        console.log(`pushed tag '${tag}' removal to server`);
                                    }).fail(function() {
                                        console.log(`oh no, something went wrong with pushing the '${tag}' tag to the server!`);
                                    });

                                    return;
                                }
                            }
                        });
                }
            };

            // initialise the remove-tags control
            var removeTags = $("#remove-tags");
            removeTags.tagsinput({ trimValue: true });
            vm.AllTags().forEach(function(t) {
                removeTags.tagsinput('add', t);
            });

            vm.AllTags.subscribe(function(newArray) {
                $("#remove-tags").tagsinput('removeAll');
                newArray.forEach(function(t) {
                    removeTags.tagsinput('add', t);
                });
            });

            // handle tags being removed from the Remove Tags control:
            $("#remove-tags").on('itemRemoved',
                function(event) {
                    var tag = event.item;
                    console.log(`itemRemoved: ${tag}`);

                    $.ajax({
                        url: `/api/galleries/remove-tag?categoryId=@Model.CategoryId&galleryId=@Model.Id&tag=${tag}`,
                        type: 'DELETE'
                    }).done(function(response) {
                        // tag deleted, show success banner
                        console.log(response);

                        // remove tag from images
                        vm.Images().forEach(function(i) {
                            if (window.TagsCsvContains(i.TagsCsv(), tag)) {
                                console.log(`removing tag ${tag} from  #uit-${i.Id}`);
                                $(`#uit-${i.Id}`).tagsinput('remove', tag, { preventPost: true });
                            }
                        });

                        // show a fading banner
                        $("#removed-tag").text(tag);
                        var banner = $("#remove-tags-banner");
                        banner.show();
                        setTimeout(function() { banner.fadeOut('slow'); }, 5000);
                    }).fail(function(response) {
                        console.log(`something went wrong when deleting the tag '${tag}':`);
                        console.log(response);
                    });

                });
        }

        // configure the uploader
        Dropzone.options.uploader = {
            paramName: "file",
            maxFilesize: 50,
            acceptedFiles: "image/*,.jpg,.jpeg,.png,/gif",
            init: function() {
                this.on("addedfile",
                    function() {
                        // uploading has started, disable other controls on the page to avoid bad things happening
                        $("#tagsControl").prop('disabled', true);
                        $("#updateAllImagesBtn").prop('disabled', true);
                        $("#creditControl").prop('disabled', true);
                    });
                this.on("queuecomplete",
                    function() {
                        // the uploads are done, tell the server we're done so it can reconcile the additions
                        $.post('/api/images/upload-complete?categoryId=@Model.CategoryId&galleryId=@Model.Id').done(
                            function() {
                                console.log("Upload complete");

                                // now refresh the page so we clear down the uploader and show the new images properly
                                location.reload();
                            });
                    });
            }
        };

        $(document).ready(function() {
            ko.applyBindings(new ViewModel());

            $("#bulk-tags").tagsinput({
                trimValue: true,
                forceLowerCase: true
            });
        });
    </script>
}
