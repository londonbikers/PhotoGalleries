@using LB.PhotoGalleries.Application
@using LB.PhotoGalleries.Application.Models
@using Newtonsoft.Json
@model LB.PhotoGalleries.Application.Models.Gallery
@{
    ViewData["Title"] = "Edit Gallery";
    var error = (string)ViewData["error"];
    var success = (string)ViewData["success"];
    var images = (List<Image>)ViewData["images"];
    var isAuthorisedToEdit = (bool)ViewData["isAuthorisedToEdit"];
}

@section Styles {
    <link rel="stylesheet" href="~/lib/dropzone/dist/dropzone.css" />
    <link rel="stylesheet" href="~/lib/dropzone/dist/basic.css" />
    <link rel="stylesheet" href="~/lib/bootstrap-tagsinput-master/dist/bootstrap-tagsinput.css" />
}


<h1>Edit Gallery</h1>
<div>
    <a asp-action="Index">Back to List</a>
</div>
<hr />

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}

@if (!string.IsNullOrEmpty(success))
{
    <div class="alert alert-success" role="alert">
        @success
    </div>
}

<div class="row">
    <div class="col">

        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="CategoryId" class="control-label"></label>
                <select class="form-control" asp-for="CategoryId" asp-items="@(new SelectList(Server.Instance.Categories.Categories,"Id","Name"))">
                    <option></option>
                </select>
                <span asp-validation-for="CategoryId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea class="form-control" rows="3" asp-for="Description"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="Active" /> @Html.DisplayNameFor(model => model.Active)
                </label>
            </div>

            @if (isAuthorisedToEdit)
            {
                <div class="form-group">
                    <a class="btn btn-danger" asp-action="Delete" asp-route-pk="@Model.CategoryId" asp-route-id="@Model.Id">
                        Delete
                    </a>
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
            }

        </form>

    </div>
    <div class="col">

        <dl class="row">
            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.Created)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Created)
            </dd>

            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.CreatedByUserId)
            </dt>
            <dd class="col-sm-10">
                @Html.ActionLink((string)ViewData["username"], "Details", "Users", new { id = Model.CreatedByUserId })
            </dd>

            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.Comments)
            </dt>
            <dd class="col-sm-10">
                @Model.Comments.Count
            </dd>

            <dt class="col-sm-10">
                Images
            </dt>
            <dd class="col-sm-10">
                @images.Count
            </dd>

            @if (Model.LegacyNumId > 0)
            {
                <dt class="col-sm-10">
                    @Html.DisplayNameFor(model => model.LegacyNumId)
                </dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.LegacyNumId)
                </dd>
            }

            @if (Model.LegacyGuidId.HasValue && Model.LegacyGuidId != Guid.Empty)
            {
                <dt class="col-sm-10">
                    @Html.DisplayNameFor(model => model.LegacyGuidId)
                </dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.LegacyGuidId)
                </dd>
            }

        </dl>

    </div>
</div>

<div class="row">
    <div class="col pb-2">
        <div id="dropzone">
            <form asp-action="Upload" asp-route-categoryId="@Model.CategoryId" asp-route-galleryId="@Model.Id" class="dropzone needsclick dz-clickable" id="uploader">
                <div class="dz-message needsclick">
                    Drop files here or click to upload.<br>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="row">
    <div class="col">
        <h2>Images</h2>

        <form class="form-inline" data-bind="submit: UpdateAllImages">
            <div class="form-group mb-2">
                <input type="text" class="form-control form-control-sm" id="creditControl" placeholder="Add credit...">
            </div>
            <div class="form-group mx-sm-3 mb-2" style="width: 400px !important;">
                <input type="text" class="form-control form-control-sm" id="tagsControl" placeholder="Add tags...">
            </div>
            <button type="submit" class="btn btn-secondary btn-sm mb-2" id="updateAllImagesBtn">Update all images</button>
        </form>
        
        <div id="bulk-update-banner" class="alert alert-success" role="alert" style="display: none">
            All images have been updated!
        </div>

    </div>
</div>

<div class="row">
    <div class="col" data-bind="sortable: {foreach: Images, options: {onEnd: OnImageMoved}}"><div class="grid-square" data-bind="attr: {id: 'gi-'+Id}"><a data-bind="attr: {href: GetImageEditUrl(Id)}"><img data-bind="attr: {title: Name, src: GetThumbnailUrl(StorageId)}" width="200" height="200" /></a></div></div>
</div>

@section Scripts
{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script src="~/lib/dropzone/dist/min/dropzone.min.js"></script>
    <script src="~/lib/knockout/dist/knockout-3.5.1.js"></script>
    <script src="~/lib/sortable/dist/Sortable.min.js"></script>
    <script src="~/lib/knockout-sortable/dist/knockout-sortable.js"></script>
    <script src="~/lib/bootstrap-tagsinput-master/dist/bootstrap-tagsinput.js"></script>

    <script type="text/javascript">

        // convert the big image documents into a new lightweight object to aid with rendering the image grid
        // and convert to json so the Knockout script can parse it and use it.
        var payload =
            @Html.Raw(JsonConvert.SerializeObject(Utilities.OrderImages(images).Select(i => new {i.Id, i.Name, i.StorageId})));
        var galleryId = '@Model.Id';

        // for high-dpi displays we need to request a larger image than the space we intend to view it in
        // this ensures images are as crisp as they can be for each client device.
        function GetThumbnailUrl(storageId) {
            var scaledSize = 200 * window.devicePixelRatio;
            return `/i/${storageId}?w=${scaledSize}&h=${scaledSize}&mode=crop`;
        }

        function OnImageMoved(evt) {
            console.log("an image was re-ordered!");

            var imageBeingMovedId = evt.item.id.substring(3);
            var imageBeingMovedNewPosition = evt.newIndex;

            // send new position to api...
            $.post(
                    `/api/images/set-position?galleryId=${galleryId}&imageId=${imageBeingMovedId}&position=${
                    imageBeingMovedNewPosition}`)
                .done(function() {
                    console.log("image ordering post-back done!");
                })
                .fail(function() {
                    // returning false on OnImageMoved() is meant to cancel the move, but it doesn't seem to work
                    console.log("oh no, something went wrong with ordering post-back!");
                    return false;
                });
        }

        function GetImageEditUrl(imageId) {
            return `../../../images/edit/@Model.CategoryId/@Model.Id/${imageId}`;
        }

        // the view model that knockout uses to bind data to the html
        function ViewModel() {
            // parse the images from a json blob
            this.Images = ko.observableArray(payload);

            this.UpdateAllImages = function() {
                var credit = $("#creditControl").val();
                var tags = $("#tagsControl").val();

                if (credit === '' && tags === '') {
                    console.log("UpdateAllImages: no credit or tag supplied.");
                    return;
                }

                $.post('/api/images/bulk-update?categoryId=@Model.CategoryId&galleryId=@Model.Id', { credit: credit, tags: tags })
                    .done(function() {
                        // images updated
                        // clear the form
                        $("#creditControl").val('');
                        $("#tagsControl").tagsinput('removeAll');

                        // show a fading banner
                        var banner = $("#bulk-update-banner");
                        banner.show();
                        setTimeout(function() {
                            banner.fadeOut('slow');
                        }, 5000);
                    })
                    .fail(function() {
                        console.log("UpdateAllImages: something went wrong when updating all images...");
                    });
            }
        }

        // configure the uploader
        Dropzone.options.uploader = {
            paramName: "file",
            maxFilesize: 50,
            acceptedFiles: "image/*,.jpg,.jpeg,.png,/gif",
            init: function() {
                this.on("addedfile",
                    function() {
                        // uploading has started, disable other controls on the page to avoid bad things happening
                        $("#tagsControl").prop('disabled', true);
                        $("#updateAllImagesBtn").prop('disabled', true);
                        $("#creditControl").prop('disabled', true);
                    });
                this.on("queuecomplete",
                    function() {
                        // the uploads are done, tell the server we're done so it can reconcile the additions
                        $.post('/api/images/upload-complete?categoryId=@Model.CategoryId&galleryId=@Model.Id');

                        // now refresh the page so we clear down the uploader and show the new images properly
                        location.reload();
                    });
            }
        };

        $(document).ready(function() {
            ko.applyBindings(new ViewModel());

            $("#tagsControl").tagsinput({
                trimValue: true,
                forceLowerCase: true
            });
        });
    </script>
}
