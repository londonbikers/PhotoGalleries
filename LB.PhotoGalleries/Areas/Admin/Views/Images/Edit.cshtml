@using Newtonsoft.Json
@model Image
@{
    ViewData["Title"] = "Edit Image";
    var error = (string)ViewData["error"];
    var success = (string)ViewData["success"];
    var gallery = (Gallery)ViewData["gallery"];
    var isAuthorisedToEdit = (bool)ViewData["isAuthorisedToEdit"];
    var mapsKey = (string) ViewData["mapsKey"];
}

@section Styles {
    <link rel="stylesheet" href="~/lib/bootstrap-tagsinput-master/dist/bootstrap-tagsinput.css" />
}

<h1>Edit Image</h1>

<div class="row">
    <div class="col">
        <a asp-controller="Galleries" asp-action="Edit" asp-route-pk="@gallery.CategoryId" asp-route-id="@gallery.Id">Back to Gallery</a>
    </div>
    <div class="col text-right">
        <a asp-area="" asp-controller="Images" asp-action="Details" asp-route-galleryId="@gallery.Id" asp-route-imageId="@Model.Id" asp-route-name="@Helpers.EncodeParamForUrl(Model.Name)">View public image</a>
    </div>
</div>

<hr />

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}

@if (!string.IsNullOrEmpty(success))
{
    <div class="alert alert-success" role="alert">
        @success
    </div>
}

<div class="row">
    <div class="col">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Caption" class="control-label"></label>
                <textarea class="form-control" rows="3" asp-for="Caption"></textarea>
                <span asp-validation-for="Caption" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Credit" class="control-label"></label>
                <input asp-for="Credit" class="form-control" />
                <small class="form-text text-muted">Please only supply if you are not the photographer.</small>
                <span asp-validation-for="Credit" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="tagsCsv" class="control-label">Tags</label>
                <input type="text" name="tagsCsv" id="tagsCsv" value="@Model.TagsCsv" />
                <small class="form-text text-muted">Please enter comma separated values.</small>
            </div>

            @if (isAuthorisedToEdit)
            {
                <div class="form-group">
                    <a class="btn btn-danger" asp-action="Delete" asp-route-categoryId="@gallery.CategoryId" asp-route-galleryId="@Model.GalleryId" asp-route-imageId="@Model.Id">
                        Delete
                    </a>
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
            }

        </form>
    </div>
    <div class="col">

        <img id="preview-image" alt="@Model.Name" width="550" style="margin-bottom: 20px;" class="image-border" />

        <dl class="row">
            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.Created)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Created)
            </dd>
            
            <dt class="col-sm-10">
                Views
            </dt>
            <dd class="col-sm-10">
                @Model.Views
            </dd>

            <dt class="col-sm-10">
                Number of comments
            </dt>
            <dd class="col-sm-10">
                @Model.Comments.Count
            </dd>

            @if (Model.LegacyNumId > 0)
            {
                <dt class="col-sm-10">
                    @Html.DisplayNameFor(model => model.LegacyNumId)
                </dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.LegacyNumId)
                </dd>
            }

            @if (Model.LegacyGuidId.HasValue && Model.LegacyGuidId != Guid.Empty)
            {
                <dt class="col-sm-10">
                    @Html.DisplayNameFor(model => model.LegacyGuidId)
                </dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.LegacyGuidId)
                </dd>
            }

        </dl>

        <h3>Metadata</h3>

        <ul>
            @if (!string.IsNullOrEmpty(Model.Metadata.OriginalFilename))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.OriginalFilename)</b>: @Html.DisplayFor(model => model.Metadata.OriginalFilename)</li>
            }
            @if (Model.Metadata.TakenDate.HasValue)
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.TakenDate)</b>: @Html.DisplayFor(model => model.Metadata.TakenDate)</li>
            }
            @if (Model.Metadata.Width.HasValue)
            {
                <li><b>Original Size</b>: @Html.DisplayFor(model => model.Metadata.Width) x @Html.DisplayFor(model => model.Metadata.Height)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.CameraMake))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.CameraMake)</b>: @Html.DisplayFor(model => model.Metadata.CameraMake)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.CameraModel))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.CameraModel)</b>: @Html.DisplayFor(model => model.Metadata.CameraModel)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.LensMake))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.LensMake)</b>: @Html.DisplayFor(model => model.Metadata.LensMake)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.LensModel))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.LensModel)</b>: @Html.DisplayFor(model => model.Metadata.LensModel)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.Aperture))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.Aperture)</b>: @Html.DisplayFor(model => model.Metadata.Aperture)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.ExposureTime))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.ExposureTime)</b>: @Html.DisplayFor(model => model.Metadata.ExposureTime)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.ExposureBias))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.ExposureBias)</b>: @Html.DisplayFor(model => model.Metadata.ExposureBias)</li>
            }
            @if (Model.Metadata.Iso.HasValue)
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.Iso)</b>: @Html.DisplayFor(model => model.Metadata.Iso.Value)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.MeteringMode))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.MeteringMode)</b>: @Html.DisplayFor(model => model.Metadata.MeteringMode)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.Flash))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.Flash)</b>: @Html.DisplayFor(model => model.Metadata.Flash)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.FocalLength))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.FocalLength)</b>: @Html.DisplayFor(model => model.Metadata.FocalLength)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.Location))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.Location)</b>: @Html.DisplayFor(model => model.Metadata.Location)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.City))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.City)</b>: @Html.DisplayFor(model => model.Metadata.City)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.State))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.State)</b>: @Html.DisplayFor(model => model.Metadata.State)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.Country))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.Country)</b>: @Html.DisplayFor(model => model.Metadata.Country)</li>
            }
        </ul>
        
        @if (Model.Metadata.LocationLatitude.HasValue)
        {
            <b>Where</b>
            <iframe
                width="550"
                height="450"
                frameborder="0" 
                style="border: solid 1px #ccc"
                src="https://www.google.com/maps/embed/v1/view?key=@mapsKey&center=@Model.Metadata.LocationLatitude.Value,@Model.Metadata.LocationLongitude.Value&zoom=18" allowfullscreen>
            </iframe>
        }

    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script src="~/lib/bootstrap-tagsinput-master/dist/bootstrap-tagsinput.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {

            // payload
            const files = @Html.Raw(JsonConvert.SerializeObject(Model.Files));

            // display the right size image for the pixel density of the display, i.e. retina images need to be requested bigger than the intended display size.
            const scaledWidth = 550 * window.devicePixelRatio;

            // choose ImageFileSpec for scaled dimensions
            var url;
            if (scaledWidth <= 800 && files.Spec800Id != null) {
                url = `/di800/@Model.Files.Spec800Id?w=${scaledWidth}`;
            } else if (scaledWidth <= 1920 && files.Spec1920Id != null) {
                url = `/di1920/@Model.Files.Spec1920Id?w=${scaledWidth}`;
            } else if (scaledWidth <= 2560 && files.Spec2560Id != null) {
                url = `/di2560/@Model.Files.Spec2560Id?w=${scaledWidth}`;
            } else if (scaledWidth <= 3840 && files.Spec3840Id != null) {
                url = `/di3840/@Model.Files.Spec3840Id?w=${scaledWidth}`;
            } else {
                url = `/dio/@Model.Files.OriginalId?w=${scaledWidth}`;
            }

            $("#preview-image").attr('src', url);

            $("#tagsCsv").tagsinput({
                trimValue: true,
                forceLowerCase: true
            });
        });

    </script>
}
