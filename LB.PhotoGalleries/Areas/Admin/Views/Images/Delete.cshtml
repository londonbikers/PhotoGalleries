@model Image
@using Newtonsoft.Json
@using LB.PhotoGalleries.Shared
@{
    ViewData["Title"] = "Delete Image";
    var error = (string)ViewData["error"];
    var gallery = (Gallery)ViewData["gallery"];
    var mapsKey = (string)ViewData["mapsKey"];
}

<h1>Delete Image</h1>
<h3>Are you sure you want to delete this?</h3>
<div>
    <a asp-controller="Galleries" asp-action="Edit" asp-route-pk="@gallery.CategoryId" asp-route-id="@gallery.Id">Back to Gallery</a>
</div>
<hr />

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}

<div class="row">

    <div class="col">

        <ul>
            <li><b>@Html.DisplayNameFor(model => model.Id)</b>: @Html.DisplayFor(model => model.Id)</li>
            <li><b>@Html.DisplayNameFor(model => model.GalleryId)</b>: @Html.DisplayFor(model => model.GalleryId)</li>
            <li><b>@Html.DisplayNameFor(model => model.Position)</b>: @Html.DisplayFor(model => model.Position)</li>
            <li><b>@Html.DisplayNameFor(model => model.Name)</b>: @Html.DisplayFor(model => model.Name)</li>
            <li><b>@Html.DisplayNameFor(model => model.Caption)</b>: @Html.DisplayFor(model => model.Caption)</li>
            <li><b>@Html.DisplayNameFor(model => model.Credit)</b>: @Html.DisplayFor(model => model.Credit)</li>
            <li><b>@Html.DisplayNameFor(model => model.Created)</b>: @Html.DisplayFor(model => model.Created)</li>
            <li><b>@Html.DisplayNameFor(model => model.CommentCount)</b>: @Html.DisplayFor(model => model.CommentCount)</li>
            <li><b>@Html.DisplayNameFor(model => model.LegacyNumId)</b>: @Html.DisplayFor(model => model.LegacyNumId)</li>
            <li><b>@Html.DisplayNameFor(model => model.LegacyGuidId)</b>: @Html.DisplayFor(model => model.LegacyGuidId)</li>
            <li><b>@Html.DisplayNameFor(model => model.Files.OriginalId)</b>: @Html.DisplayFor(model => model.Files.OriginalId)</li>
            <li><b>@Html.DisplayNameFor(model => model.Files.Spec3840Id)</b>: @Html.DisplayFor(model => model.Files.Spec3840Id)</li>
            <li><b>@Html.DisplayNameFor(model => model.Files.Spec2560Id)</b>: @Html.DisplayFor(model => model.Files.Spec2560Id)</li>
            <li><b>@Html.DisplayNameFor(model => model.Files.Spec1920Id)</b>: @Html.DisplayFor(model => model.Files.Spec1920Id)</li>
            <li><b>@Html.DisplayNameFor(model => model.Files.Spec800Id)</b>: @Html.DisplayFor(model => model.Files.Spec800Id)</li>
            <li><b>@Html.DisplayNameFor(model => model.Files.SpecLowResId)</b>: @Html.DisplayFor(model => model.Files.SpecLowResId)</li>
            @if (Model.TagsCsv.HasValue())
            {
                <li>
                    <b>Tags</b>:
                    @foreach (var tag in Model.TagsCsv.Split(","))
                    {
                        <span class="badge badge-info">@tag</span>
                    }
                </li>
            }
        </ul>
        
        <p>
            Warning: This will result in the image file being deleted and cannot be undone. 
            Make sure you have an offline copy beforehand if you want to keep this image.
        </p>
        
        <form asp-action="Delete">
            <input type="submit" value="Delete" class="btn btn-danger" />
        </form>

    </div>
    <div class="col">

        <img id="preview-image" alt="@Model.Name" width="550" style="margin-bottom: 20px;" class="img-thumbnail" />

        <h3>Metadata</h3>
        
        <ul>
            @if (Model.Metadata.TakenDate.HasValue)
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.TakenDate)</b>: @Html.DisplayFor(model => model.Metadata.TakenDate)</li>
            }
            @if (Model.Metadata.Width.HasValue)
            {
                <li><b>Original Size</b>: @Html.DisplayFor(model => model.Metadata.Width) x @Html.DisplayFor(model => model.Metadata.Height)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.CameraMake))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.CameraMake)</b>: @Html.DisplayFor(model => model.Metadata.CameraMake)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.CameraModel))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.CameraModel)</b>: @Html.DisplayFor(model => model.Metadata.CameraModel)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.LensMake))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.LensMake)</b>: @Html.DisplayFor(model => model.Metadata.LensMake)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.LensModel))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.LensModel)</b>: @Html.DisplayFor(model => model.Metadata.LensModel)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.Aperture))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.Aperture)</b>: @Html.DisplayFor(model => model.Metadata.Aperture)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.ExposureTime))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.ExposureTime)</b>: @Html.DisplayFor(model => model.Metadata.ExposureTime)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.ExposureBias))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.ExposureBias)</b>: @Html.DisplayFor(model => model.Metadata.ExposureBias)</li>
            }
            @if (Model.Metadata.Iso.HasValue)
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.Iso)</b>: @Html.DisplayFor(model => model.Metadata.Iso.Value)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.MeteringMode))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.MeteringMode)</b>: @Html.DisplayFor(model => model.Metadata.MeteringMode)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.Flash))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.Flash)</b>: @Html.DisplayFor(model => model.Metadata.Flash)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.FocalLength))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.FocalLength)</b>: @Html.DisplayFor(model => model.Metadata.FocalLength)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.Location))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.Location)</b>: @Html.DisplayFor(model => model.Metadata.Location)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.City))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.City)</b>: @Html.DisplayFor(model => model.Metadata.City)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.State))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.State)</b>: @Html.DisplayFor(model => model.Metadata.State)</li>
            }
            @if (!string.IsNullOrEmpty(Model.Metadata.Country))
            {
                <li><b>@Html.DisplayNameFor(model => model.Metadata.Country)</b>: @Html.DisplayFor(model => model.Metadata.Country)</li>
            }
        </ul>

        @if (Model.Metadata.LocationLatitude.HasValue)
        {
            <b>Where</b>
            <iframe width="550"
                    height="450"
                    frameborder="0" 
                    style="border: solid 1px #ccc"
                    src="https://www.google.com/maps/embed/v1/view?key=@mapsKey&center=@Model.Metadata.LocationLatitude.Value,@Model.Metadata.LocationLongitude.Value&zoom=18" allowfullscreen>
            </iframe>
        }
        else if (Model.Metadata.CombinedLocation.HasValue())
        {
            <iframe
                width="550"
                height="450"
                frameborder="0" 
                style="border: solid 1px #ccc"
                src="https://www.google.com/maps/embed/v1/place?key=@mapsKey&q=@Model.Metadata.CombinedLocation&zoom=18" allowfullscreen>
            </iframe>
        }

    </div>

</div>



@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {

            // payload
            const files = @Html.Raw(JsonConvert.SerializeObject(Model.Files));

            // display the right size image for the pixel density of the display, i.e. retina images need to be requested bigger than the intended display size.
            const scaledWidth = 550 * window.devicePixelRatio;

            // choose ImageFileSpec for scaled dimensions
            var url;
            if (scaledWidth <= 800 && files.Spec800Id != null) {
                url = `/di800/@Model.Files.Spec800Id?w=${scaledWidth}`;
            } else if (scaledWidth <= 1920 && files.Spec1920Id != null) {
                url = `/di1920/@Model.Files.Spec1920Id?w=${scaledWidth}`;
            } else if (scaledWidth <= 2560 && files.Spec2560Id != null) {
                url = `/di2560/@Model.Files.Spec2560Id?w=${scaledWidth}`;
            } else if (scaledWidth <= 3840 && files.Spec3840Id != null) {
                url = `/di3840/@Model.Files.Spec3840Id?w=${scaledWidth}`;
            } else {
                url = `/dio/@Model.Files.OriginalId?w=${scaledWidth}`;
            }

            $("#preview-image").attr('src', url);
        });
    </script>
}
